'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reduce2 = require('lodash/reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _each2 = require('lodash/each');

var _each3 = _interopRequireDefault(_each2);

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.generateSrc = generateSrc;
exports.openImg = openImg;
exports.downloadImg = downloadImg;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017 Kensho Technologies, Inc.

var serializer = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && new XMLSerializer();
var serializeNodeList = function serializeNodeList(nodeList) {
  return (0, _reduce3.default)(nodeList, function (acc, node) {
    return acc + serializer.serializeToString(node);
  }, ''

  /**
   * Renders a DOM node to a dataURL source, which can be used to generate a
   * downloadable image. The size of the node is used for setting the size of the
   * rendered image.
   * @example
   * generateSrc(
   *   node,
   *   dataURL => downloadImg(dataURL),
   * )
   */
  );
};function generateSrc(clbck, node) {
  var multiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

  var width = node.scrollWidth;
  var height = node.scrollHeight;
  var cloned = node.cloneNode(true);
  var canvasNodes = node.querySelectorAll('canvas');
  var styleNodes = document.querySelectorAll('style');
  (0, _each3.default)(cloned.querySelectorAll('canvas'), function (cloneCanvas, idx) {
    var canvas = canvasNodes[idx];
    var img = document.createElement('img');
    img.src = canvas.toDataURL('image/png');
    img.setAttribute('style', canvas.getAttribute('style'));
    img.setAttribute('width', canvas.getAttribute('width') + ' px');
    img.setAttribute('height', canvas.getAttribute('height') + ' px');
    cloneCanvas.parentNode.replaceChild(img, cloneCanvas);
  });
  var canvas = document.createElement('canvas');
  canvas.width = width * multiplier;
  canvas.height = height * multiplier;
  var ctx = canvas.getContext('2d');
  var data = '\n    <svg xmlns="http://www.w3.org/2000/svg" width="' + width + '" height="' + height + '">\n      <foreignObject\n        width="' + width + '"\n        height="' + height + '"\n      >\n        ' + serializeNodeList(styleNodes) + '\n        ' + serializer.serializeToString(cloned) + '\n      </foreignObject>\n    </svg>';
  var url = 'data:image/svg+xml;charset=utf-8, ' + encodeURIComponent(data);
  var img = new Image();
  img.setAttribute('crossOrigin', 'anonymous');
  img.src = url;
  img.onload = function onImgLoad() {
    ctx.drawImage(img, 0, 0, width * multiplier, height * multiplier);
    var dataURL = canvas.toDataURL('image/png');
    clbck(dataURL);
  };
}

/**
 * Opens image in a new tab
 */
function openImg(dataURL) {
  if ((typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' && global.window) global.window.open(dataURL);
}

/**
 * Forces the browser to download the dataURL as a png image with the name
 * provided.
 */
function downloadImg(dataURL) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'chart';

  var link = document.createElement('a');
  link.download = name;
  link.href = dataURL;
  document.body.appendChild(link);
  link.click();
  link.remove();
}