'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _mocha = require('mocha');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _ = require('./');

var _defaultTheme = require('../../defaultTheme');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _mocha.describe)('utils.fitCheckText', function () {
  var textData = void 0;
  var width = 1000;
  var height = 1000;

  (0, _mocha.beforeEach)(function () {
    textData = {
      text: 'text with a length of 25.',
      x: 250,
      y: 125
    };
  });

  (0, _mocha.it)('utils.fitCheckText does not shift if fits on canvas', function () {
    _assert2.default.deepEqual((0, _.fitCheckText)(textData, width, height, _defaultTheme.DEFAULT_THEME), _extends({}, textData, { x: 250, y: 125 }));
  });

  (0, _mocha.it)('utils.fitCheckText shifts overflow', function () {
    textData.x = 1000;
    _assert2.default.deepEqual((0, _.fitCheckText)(textData, width, height, _defaultTheme.DEFAULT_THEME), _extends({}, textData, { x: 975, y: 125 }));
  });

  (0, _mocha.it)('utils.fitCheckText shifts underflow', function () {
    textData.textAlign = 'right';
    textData.x = 10;
    _assert2.default.deepEqual((0, _.fitCheckText)(textData, width, height, _defaultTheme.DEFAULT_THEME), _extends({}, textData, { x: 25, y: 125 }));
  });

  (0, _mocha.it)('utils.fitCheckText shifts rotated overflow', function () {
    textData.rotate = -Math.PI / 2;
    textData.y = 10;
    _assert2.default.deepEqual((0, _.fitCheckText)(textData, width, height, _defaultTheme.DEFAULT_THEME), _extends({}, textData, { x: 250, y: 25 }));
  });

  (0, _mocha.it)('utils.fitCheckText shifts rotated underflow', function () {
    textData.rotate = -Math.PI / 2;
    textData.y = 980;
    textData.textAlign = 'right';
    _assert2.default.deepEqual((0, _.fitCheckText)(textData, width, height, _defaultTheme.DEFAULT_THEME), _extends({}, textData, { x: 250, y: 975 }));
  });

  (0, _mocha.it)('utils.fitCheckText does not shift if rotated fits on canvas', function () {
    textData.rotate = -Math.PI / 2;
    textData.y = 15;
    textData.textAlign = 'right';
    _assert2.default.deepEqual((0, _.fitCheckText)(textData, width, height, _defaultTheme.DEFAULT_THEME), _extends({}, textData, { x: 250, y: 15 }));
  });

  (0, _mocha.describe)('handles centered text', function () {
    (0, _mocha.beforeEach)(function () {
      textData.textAlign = 'center';
    });

    (0, _mocha.it)('with overflow', function () {
      textData.x = 990;
      _assert2.default.deepEqual((0, _.fitCheckText)(textData, width, height, _defaultTheme.DEFAULT_THEME), _extends({}, textData, { x: 987.5, y: 125 }));
    });

    (0, _mocha.it)('with underFlow', function () {
      textData.x = 5;
      _assert2.default.deepEqual((0, _.fitCheckText)(textData, width, height, _defaultTheme.DEFAULT_THEME), _extends({}, textData, { x: 12.5, y: 125 }));
    });
  });

  (0, _mocha.describe)('handles offsets', function () {
    (0, _mocha.it)('that fit the canvas', function () {
      textData.xOffset = -100;
      textData.x = 1000;
      _assert2.default.deepEqual((0, _.fitCheckText)(textData, width, height, _defaultTheme.DEFAULT_THEME), _extends({}, textData, { x: 900, y: 125 }));
    });

    (0, _mocha.it)('x underflow with offset', function () {
      textData.xOffset = -100;
      textData.x = 50;
      _assert2.default.deepEqual((0, _.fitCheckText)(textData, width, height, _defaultTheme.DEFAULT_THEME), _extends({}, textData, { x: 0, y: 125 }));
    });

    (0, _mocha.it)('y overflow with offset', function () {
      textData.yOffset = -50;
      textData.rotate = -Math.PI / 2;
      textData.y = 50;
      _assert2.default.deepEqual((0, _.fitCheckText)(textData, width, height, _defaultTheme.DEFAULT_THEME), _extends({}, textData, { x: 250, y: 25 }));
    });

    (0, _mocha.it)('that do not impact overflow or underflow', function () {
      textData.yOffset = -45;
      textData.y = 45;
      _assert2.default.deepEqual((0, _.fitCheckText)(textData, width, height, _defaultTheme.DEFAULT_THEME), _extends({}, textData, { x: 250, y: 0 }));
    });
  });
});