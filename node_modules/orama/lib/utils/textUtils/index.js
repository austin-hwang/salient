'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fitCheckText = undefined;

var _update2 = require('lodash/update');

var _update3 = _interopRequireDefault(_update2);

var _getPlotRect = require('../../chartCore/getPlotRect');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fitCheckText = exports.fitCheckText = function fitCheckText(textObj, canvasWidth, canvasHeight, theme) {
  var updateTextObj = function updateTextObj(key, toAdd) {
    return (0, _update3.default)(textObj, key, function (val) {
      return val + toAdd;
    });
  };

  var _updateTextObj = updateTextObj('x', textObj.xOffset || 0),
      x = _updateTextObj.x;

  var _updateTextObj2 = updateTextObj('y', textObj.yOffset || 0),
      y = _updateTextObj2.y;

  var isRotated = Boolean(textObj.rotate);

  var _getTextBounds = getTextBounds(textObj, isRotated, theme),
      textStart = _getTextBounds.textStart,
      textEnd = _getTextBounds.textEnd;

  var overFlow = textEnd - (isRotated ? canvasHeight : canvasWidth);
  var underFlow = -textStart;

  var shift = overFlow > 0 ? -overFlow : underFlow > 0 ? underFlow : 0;

  return updateTextObj(isRotated ? 'y' : 'x', shift);
};

var getTextBounds = function getTextBounds(textObj, isRotated, theme) {
  var textAlign = textObj.textAlign || 'left';
  var textWidth = (0, _getPlotRect.getTextWidth)(theme, textObj.text) * (textAlign === 'center' ? .5 : 1);
  var initialCoord = isRotated ? textObj.y : textObj.x;
  var rightAligned = ['right', 'end'].includes(textAlign);
  var leftAligned = ['left', 'start'].includes(textAlign);

  return {
    textStart: !(isRotated ^ leftAligned) ? initialCoord - textWidth : initialCoord,
    textEnd: !(isRotated ^ rightAligned) ? initialCoord + textWidth : initialCoord
  };
};