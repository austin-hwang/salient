'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.text = exports.getTextRenderData = undefined;

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Copyright 2017 Kensho Technologies, Inc.

var _rectUtils = require('../../utils/rectUtils');

var _getPlotValues = require('../../Layer/getPlotValues');

var _textUtils = require('../../utils/textUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
generates the array of render data
*/
var getTextRenderData = exports.getTextRenderData = function getTextRenderData(props, datum, idx) {
  var plotRect = props.plotRect,
      theme = props.theme,
      width = props.width,
      height = props.height;

  var values = (0, _getPlotValues.getPlotValues)(props, datum, idx, {
    x: (0, _rectUtils.getMidX)(props.plotRect),
    y: (0, _rectUtils.getMidY)(props.plotRect)
  });

  if (values.textSnap === 'top') values.y = (0, _rectUtils.getMinY)(plotRect);
  if (values.textSnap === 'bottom') values.y = (0, _rectUtils.getMaxY)(plotRect);
  if (values.textSnap === 'left') values.x = (0, _rectUtils.getMinX)(plotRect);
  if (values.textSnap === 'right') values.x = (0, _rectUtils.getMaxX)(plotRect);
  if (values.textSnap === 'topLeft') {
    values.x = (0, _rectUtils.getMinX)(plotRect);
    values.y = (0, _rectUtils.getMinY)(plotRect);
  }
  if (values.textSnap === 'topRight') {
    values.x = (0, _rectUtils.getMaxX)(plotRect);
    values.y = (0, _rectUtils.getMinY)(plotRect);
  }
  if (values.textSnap === 'bottomLeft') {
    values.x = (0, _rectUtils.getMinX)(plotRect);
    values.y = (0, _rectUtils.getMaxY)(plotRect);
  }
  if (values.textSnap === 'bottomRight') {
    values.x = (0, _rectUtils.getMaxX)(plotRect);
    values.y = (0, _rectUtils.getMaxY)(plotRect);
  }

  var newValues = (0, _textUtils.fitCheckText)(values, width, height, theme);

  return _extends({}, newValues, {
    type: 'text'
  });
};

/*
Main entry point, if there's only `xMap` or `yMap` it will output an one dimension plot.
*/
var text = exports.text = function text(props) {
  if (!props.xScale && !props.yScale) return undefined;
  return (0, _map3.default)((0, _flatten3.default)(props.data), function (datum, idx) {
    return getTextRenderData(props, datum, idx);
  });
};