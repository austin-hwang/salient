'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Copyright 2017 Kensho Technologies, Inc.

var _mocha = require('mocha');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _defaults = require('../../chartCore/defaults');

var _ = require('./');

var methods = _interopRequireWildcard(_);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _mocha.it)('Chart.guides', function () {
  var renderData = methods.guides({
    data: [{ x: 1, y: 1 }],
    plotRect: _defaults.PLOT_RECT,
    xScale: function xScale(d) {
      return d;
    },
    yScale: function yScale(d) {
      return d;
    }
  });
  _assert2.default.deepEqual(renderData[0], _extends({}, renderData[0], {
    type: 'line'
  }));
});
(0, _mocha.it)('Chart.guides missing yMap', function () {
  var renderData = methods.guides({
    data: [{ x: 1, y: 1 }],
    plotRect: _defaults.PLOT_RECT,
    xScale: function xScale(d) {
      return d;
    }
  });
  _assert2.default.deepEqual(renderData[0], _extends({}, renderData[0], {
    type: 'line'
  }));
});
(0, _mocha.it)('Chart.guides grouped data', function () {
  var renderData = methods.guides({
    data: [[{ x: 1, y: 1 }]],
    plotRect: _defaults.PLOT_RECT,
    xScale: function xScale(d) {
      return d;
    },
    yScale: function yScale(d) {
      return d;
    }
  });
  _assert2.default.deepEqual(renderData[0], _extends({}, renderData[0], {
    type: 'line'
  }));
});