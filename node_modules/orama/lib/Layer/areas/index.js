'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.areas = exports.getAreaRenderData = exports.hoverSolver = exports.getPointData = undefined;

var _reduce2 = require('lodash/reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _isArray2 = require('lodash/isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _reject2 = require('lodash/reject');

var _reject3 = _interopRequireDefault(_reject2);

var _eachRight2 = require('lodash/eachRight');

var _eachRight3 = _interopRequireDefault(_eachRight2);

var _each2 = require('lodash/each');

var _each3 = _interopRequireDefault(_each2);

var _head2 = require('lodash/head');

var _head3 = _interopRequireDefault(_head2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _last2 = require('lodash/last');

var _last3 = _interopRequireDefault(_last2);

var _findIndex2 = require('lodash/findIndex');

var _findIndex3 = _interopRequireDefault(_findIndex2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Copyright 2017 Kensho Technologies, Inc.

var _rectUtils = require('../../utils/rectUtils');

var _path2DUtils = require('../../utils/path2DUtils');

var _getPlotValues = require('../../Layer/getPlotValues');

var _utils = require('../../utils');

var _plotValue = require('../../Layer/plotValue');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getPointData = exports.getPointData = function getPointData(props, datum, yKey) {
  var path2D = (0, _path2DUtils.getPath2D)();
  var x = (0, _plotValue.plotValue)(props, datum, undefined, 'x');
  var y = (0, _plotValue.plotValue)(props, datum, undefined, yKey);
  var r = (0, _plotValue.plotValue)(props, datum, undefined, 'strokeWidth', 2) + 1.5;
  if ((0, _utils.notPlotNumber)([x, y, r])) return undefined;
  path2D.arc(x, y, r, 0, 2 * Math.PI);
  return {
    hoverAlpha: 0.8,
    path2D: path2D,
    type: 'area'
  };
};

var getHoverSolverObj = function getHoverSolverObj(props, renderDatum, hoverData) {
  return {
    hoverRenderData: [renderDatum, getPointData(props, hoverData, 'y'), getPointData(props, hoverData, 'y0')],
    hoverData: hoverData
  };
};

var hoverSolver = exports.hoverSolver = function hoverSolver(props, _hoverData, renderDatum, localMouse) {
  var xRaw = props.xScale.invert(localMouse.x);
  if (props.xType === 'ordinal') {
    var _hoverData2 = (0, _find3.default)(_hoverData, function (d) {
      return (0, _get3.default)(d, props.x) === xRaw;
    });
    return getHoverSolverObj(props, renderDatum, _hoverData2);
  }
  var hoverIndex = (0, _findIndex3.default)(_hoverData, function (d) {
    return (0, _get3.default)(d, props.x) > xRaw;
  });
  if (hoverIndex === 0) {
    var _hoverData3 = _hoverData[hoverIndex];
    return getHoverSolverObj(props, renderDatum, _hoverData3);
  }
  if (hoverIndex === -1) {
    var _hoverData4 = (0, _last3.default)(_hoverData);
    return getHoverSolverObj(props, renderDatum, _hoverData4);
  }
  var px = (0, _get3.default)(_hoverData[hoverIndex], props.x);
  var x = (0, _get3.default)(_hoverData[hoverIndex - 1], props.x);
  if (xRaw - px < x - xRaw) {
    var _hoverData5 = _hoverData[hoverIndex - 1];
    return getHoverSolverObj(props, renderDatum, _hoverData5);
  }
  var hoverData = _hoverData[hoverIndex];
  return getHoverSolverObj(props, renderDatum, hoverData);
};

var getAreaRenderData = exports.getAreaRenderData = function getAreaRenderData(props, data, idx) {
  if ((0, _isEmpty3.default)(data)) return { showHover: false };
  var path2D = (0, _path2DUtils.getPath2D)();
  path2D.moveTo((0, _plotValue.plotValue)(props, (0, _head3.default)(data), idx, 'x', 0), (0, _plotValue.plotValue)(props, (0, _head3.default)(data), idx, 'y', 0));
  (0, _each3.default)(data, function (d) {
    var x = (0, _plotValue.plotValue)(props, d, idx, 'x');
    var y = (0, _plotValue.plotValue)(props, d, idx, 'y');
    if ((0, _utils.notPlotNumber)([x, y])) return;
    path2D.lineTo(x, y);
  });
  var y0 = (0, _plotValue.plotValue)(props, (0, _head3.default)(data), idx, 'y0');
  var x0 = (0, _plotValue.plotValue)(props, (0, _head3.default)(data), idx, 'x0'
  // if there's no base position accessors
  );if ((0, _utils.notPlotNumber)(y0) && (0, _utils.notPlotNumber)(x0)) {
    var localY0 = props.yScale(0) || (0, _rectUtils.getMaxY)(props.plotRect);
    path2D.lineTo((0, _plotValue.plotValue)(props, (0, _last3.default)(data), idx, 'x', 0), localY0);
    path2D.lineTo((0, _plotValue.plotValue)(props, (0, _head3.default)(data), idx, 'x', 0), localY0
    // if the base is on the y axis
    );
  } else if ((0, _utils.isPlotNumber)(y0) && (0, _utils.notPlotNumber)(x0)) {
    (0, _eachRight3.default)(data, function (d) {
      var x = (0, _plotValue.plotValue)(props, d, idx, 'x');
      var localY0 = (0, _plotValue.plotValue)(props, d, idx, 'y0');
      if ((0, _utils.notPlotNumber)([x, localY0])) return;
      path2D.lineTo(x, localY0);
    }
    // if the base is on the x axis
    );
  } else if ((0, _utils.notPlotNumber)(y0) && (0, _utils.isPlotNumber)(x0)) {
    (0, _eachRight3.default)(data, function (d) {
      var localX0 = (0, _plotValue.plotValue)(props, d, idx, 'x0');
      var y = (0, _plotValue.plotValue)(props, d, idx, 'y');
      if ((0, _utils.notPlotNumber)([localX0, y])) return;
      path2D.lineTo(localX0, y);
    });
  }
  path2D.closePath();

  var values = (0, _getPlotValues.getPlotValues)(props, (0, _head3.default)(data), idx, {
    hoverAlpha: 0.25
  });
  return _extends({}, values, {
    data: data,
    hoverSolver: hoverSolver,
    path2D: path2D,
    type: 'area'
  });
};

var splitDataAtNulls = function splitDataAtNulls(props, data) {
  var checkNullPoint = (0, _plotValue.isNullPoint)(props);
  return (0, _reject3.default)((0, _utils.splitBy)(data, checkNullPoint).map(function (arr) {
    return (0, _reject3.default)(arr, checkNullPoint);
  }), _isEmpty3.default);
};

var areas = exports.areas = function areas(props) {
  if (!props.xScale || !props.yScale) return undefined;
  var data = splitDataAtNulls(props, props.data);
  if ((0, _isArray3.default)((0, _head3.default)(data))) {
    return (0, _reduce3.default)(data, function (acc, data, idx) {
      return acc.concat(getAreaRenderData(props, data, idx));
    }, []);
  }
  return [getAreaRenderData(props, props.data)];
};