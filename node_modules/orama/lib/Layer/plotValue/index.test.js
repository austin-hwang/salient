'use strict';

var _mocha = require('mocha');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _ = require('./');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017 Kensho Technologies, Inc.

(0, _mocha.it)('Chart/plotValue.getScaleKeyByHash', function () {
  var actual = (0, _.getScaleKeyByHash)({}, 'x0');
  var expected = 'x';
  _assert2.default.deepEqual(actual, expected);
});

(0, _mocha.it)('Chart/plotValue, ${key}Value on the props', function () {
  var props = {
    xScale: function xScale() {
      return 'mapped';
    },
    x: 'x',
    xValue: 'a'
  };
  var actual = (0, _.plotValue)(props, { x: 10, xValue: 20 }, undefined, 'x');
  var expected = 'a';
  _assert2.default.deepEqual(actual, expected);
});
(0, _mocha.it)('Chart/plotValue, scaled data accessed with the accessor', function () {
  var props = {
    xScale: function xScale() {
      return 'mapped';
    },
    x: 'x',
    xValue: NaN
  };
  var actual = (0, _.plotValue)(props, { x: 10, xValue: 20 }, undefined, 'x');
  var expected = 'mapped';
  _assert2.default.deepEqual(actual, expected);
});
(0, _mocha.it)('Chart/plotValue, ${key}Value on the data 1', function () {
  var props = {
    xScale: function xScale() {
      return null;
    },
    x: 'prop1',
    xValue: NaN
  };
  var actual = (0, _.plotValue)(props, { x: 10, xValue: 20 }, undefined, 'x');
  var expected = 20;
  _assert2.default.deepEqual(actual, expected);
});
(0, _mocha.it)('Chart/plotValue, ${key}Value on the data 2', function () {
  var props = {
    x: 'prop1'
  };
  var actual = (0, _.plotValue)(props, { x: 10, xValue: 20 }, undefined, 'x');
  var expected = 20;
  _assert2.default.deepEqual(actual, expected);
});
(0, _mocha.it)('Chart/plotValue, ${key}Value on the data 3', function () {
  var props = {
    x: 'x'
  };
  var actual = (0, _.plotValue)(props, { x: 10 }, undefined, 'x');
  var expected = 10;
  _assert2.default.deepEqual(actual, expected);
});

(0, _mocha.it)('Chart/plotValue, all undefined', function () {
  var actual = (0, _.plotValue)({}, 10, undefined, 'x', 20);
  var expected = 20;
  _assert2.default.deepEqual(actual, expected);
});

(0, _mocha.it)('Chart/plotValue, function as value', function () {
  var actual = (0, _.plotValue)({ xValue: function xValue(p, d, i) {
      return i * 2;
    } }, {}, 1, 'x');
  var expected = 2;
  _assert2.default.deepEqual(actual, expected);
});