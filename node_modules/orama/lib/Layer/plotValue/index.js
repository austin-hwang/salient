'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNullPoint = exports.plotValue = exports.getScaleKeyByHash = undefined;

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _each2 = require('lodash/each');

var _each3 = _interopRequireDefault(_each2);

var _reduce2 = require('lodash/reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _memoize2 = require('lodash/memoize');

var _memoize3 = _interopRequireDefault(_memoize2);

var _defaults = require('../../chartCore/defaults');

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
`plotValue` is a helper to get back the mapped value plotted from a object.
It's used inside of the plotFunctions.
According to the configuration on the props provided it has different behaviours.
*/

// Copyright 2017 Kensho Technologies, Inc.

var generateAccessorGroupHash = (0, _memoize3.default)(function (accessorsGroups) {
  return (0, _reduce3.default)(accessorsGroups, function (acc, values, key) {
    /* eslint-disable no-param-reassign */
    (0, _each3.default)(values, function (d) {
      acc[d] = key;
    }
    /* eslint-enable no-param-reassign */
    );return acc;
  }, {});
}

/*
getScaleKeyByHash is used to return the main key for a group of accessors.
For example, x, x0, x1 and x2 all will return 'x'
*/
);var getScaleKeyByHash = exports.getScaleKeyByHash = function getScaleKeyByHash(props, key) {
  var _props$accessorsGroup = props.accessorsGroups,
      accessorsGroups = _props$accessorsGroup === undefined ? _defaults.ACCESSORS_GROUPS : _props$accessorsGroup;

  var hash = generateAccessorGroupHash(accessorsGroups);
  return hash[key] || key;
};

/*
Plot values returns the value to be plotted from the input.
It has the following resolution order:
1. ${key}Value on the props
2. scaled data accessed with the accessor
3. ${key}Value on the data
4. defaultValue from arguments
5. value of datum[accessor] (can be undefined)
*/
var plotValue = exports.plotValue = function plotValue(props, datum, idx, key, defaultValue) {
  var scaleKey = getScaleKeyByHash(props, key);
  var accessor = props[key],
      value = props[key + 'Value'],
      scale = props[scaleKey + 'Scale'];


  if ((0, _isFunction3.default)(value)) return value(props, datum, idx);
  if ((0, _utils.isDatum)(value)) return value;
  var objValue = (0, _get3.default)(datum, accessor);
  if (scale) {
    var mappedValue = scale(objValue);
    if ((0, _utils.isDatum)(mappedValue) && (0, _utils.isDatum)(objValue)) return mappedValue;
  }
  if ((0, _utils.isDatum)(objValue)) return objValue;
  var objKeyValue = (0, _get3.default)(datum, key + 'Value');
  if ((0, _utils.isDatum)(objKeyValue)) return objKeyValue;
  return defaultValue || objValue;
};

var isNullPoint = exports.isNullPoint = function isNullPoint(props) {
  return function (datum, idx) {
    return plotValue(props, datum, idx, 'x', null) === null || plotValue(props, datum, idx, 'x0', null) === null || plotValue(props, datum, idx, 'y', null) === null || plotValue(props, datum, idx, 'y0', null) === null;
  };
};