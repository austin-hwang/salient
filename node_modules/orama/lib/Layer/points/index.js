'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.points = undefined;

var _isArray2 = require('lodash/isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Copyright 2017 Kensho Technologies, Inc.

var _rectUtils = require('../../utils/rectUtils');

var _path2DUtils = require('../../utils/path2DUtils');

var _getPlotValues = require('../../Layer/getPlotValues');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
`points` is used to generate render data for dots and similar.
it handles `x`, `y`, 'radius' and 'fill'.

@calling logic
points{
  getPointRenderData(retrievePointsData){}
}
*/

/*
generates the array of render data
*/
var getPointRenderData = function getPointRenderData(props, datum, idx) {
  var values = (0, _getPlotValues.getPlotValues)(props, datum, idx, {
    hoverAlpha: 0.75,
    radius: 4,
    x: (0, _rectUtils.getMidX)(props.plotRect),
    y: (0, _rectUtils.getMidY)(props.plotRect)
  });
  var path2D = (0, _path2DUtils.getPath2D)();
  var hover2ndPath2D = (0, _path2DUtils.getPath2D)();
  path2D.arc(values.x, values.y, values.radius, 0, 2 * Math.PI);
  hover2ndPath2D.arc(values.x, values.y, values.radius + 8, 0, 2 * Math.PI);

  return _extends({}, values, {
    hover2ndPath2D: hover2ndPath2D,
    path2D: path2D,
    type: 'area'
  });
};

/*
Main entry point, if there's only `xMap` or `yMap` it will output an one dimension plot.
*/
var points = exports.points = function points(props) {
  if (!props.xScale && !props.yScale) return undefined;
  return (0, _flatten3.default)((0, _map3.default)(props.data, function (datum, idx) {
    if ((0, _isArray3.default)(datum)) {
      return (0, _map3.default)(datum, function (d, i) {
        return getPointRenderData(props, d, i);
      });
    }
    return getPointRenderData(props, datum, idx);
  }));
};