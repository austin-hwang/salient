'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ranges = undefined;

var _isNumber2 = require('lodash/isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Copyright 2017 Kensho Technologies, Inc.

var _path2DUtils = require('../../utils/path2DUtils');

var _defaults = require('../../chartCore/defaults');

var _getPlotValues = require('../../Layer/getPlotValues');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var rangesRender = function rangesRender(props, datum, idx) {
  var _props$backgroundOffs = props.backgroundOffset,
      backgroundOffset = _props$backgroundOffs === undefined ? _defaults.BACKGROUND_OFFSET : _props$backgroundOffs,
      plotRect = props.plotRect;

  var path2D = (0, _path2DUtils.getPath2D)();
  var values = (0, _getPlotValues.getPlotValues)(props, datum, idx);
  if ((0, _isNumber3.default)(values.x1) && (0, _isNumber3.default)(values.x2) && (0, _isNumber3.default)(values.y1) && (0, _isNumber3.default)(values.y2)) {
    path2D.rect(values.x1, values.y1, values.x2 - values.x1, values.y2 - values.y1);
  } else if ((0, _isNumber3.default)(values.x1) && (0, _isNumber3.default)(values.x2)) {
    path2D.rect(values.x1, plotRect.y - backgroundOffset, values.x2 - values.x1, plotRect.height + backgroundOffset * 2);
  } else if ((0, _isNumber3.default)(values.y1) && (0, _isNumber3.default)(values.y2)) {
    path2D.rect(plotRect.x - backgroundOffset, values.y1, plotRect.width + backgroundOffset * 2, values.y2 - values.y1);
  }
  return _extends({}, values, {
    path2D: path2D,
    type: 'area'
  });
};

var ranges = exports.ranges = function ranges(props) {
  if (!props.xScale && !props.yScale) return undefined;
  return (0, _map3.default)((0, _flatten3.default)(props.data), function (datum, idx) {
    return rangesRender(props, datum, idx);
  });
};