'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.brushes = undefined;

var _isNumber2 = require('lodash/isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Copyright 2017 Kensho Technologies, Inc.

var _defaults = require('../../chartCore/defaults');

var _getBrushesRenderData = require('../../Layer/getBrushesRenderData');

var _getPlotValues = require('../../Layer/getPlotValues');

var _path2DUtils = require('../../utils/path2DUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var brushesRender = function brushesRender(props, datum) {
  var _props$backgroundOffs = props.backgroundOffset,
      backgroundOffset = _props$backgroundOffs === undefined ? _defaults.BACKGROUND_OFFSET : _props$backgroundOffs,
      plotRect = props.plotRect;

  var stroke = props.strokeValue;
  var fill = props.fillValue;
  var fillAlpha = props.fillAlphaValue || 0.4;
  var lineWidth = props.lineWidthValue || 3;
  var values = (0, _getPlotValues.getPlotValues)(props, datum);

  var renderArgs = _extends({}, values, {
    plotRect: plotRect, backgroundOffset: backgroundOffset,
    stroke: stroke,
    fill: fill,
    fillAlpha: fillAlpha,
    lineWidth: lineWidth
  });

  if ((0, _isNumber3.default)(values.x1) && (0, _isNumber3.default)(values.x2) && (0, _isNumber3.default)(values.y1) && (0, _isNumber3.default)(values.y2)) {
    return [(0, _getBrushesRenderData.centerArea)(renderArgs), (0, _getBrushesRenderData.leftCenterLine)(renderArgs), (0, _getBrushesRenderData.rightCenterLine)(renderArgs), (0, _getBrushesRenderData.topCenterLine)(renderArgs), (0, _getBrushesRenderData.bottomCenterLine)(renderArgs), (0, _getBrushesRenderData.leftTopLine)(renderArgs), (0, _getBrushesRenderData.leftBottomLine)(renderArgs), (0, _getBrushesRenderData.rightTopLine)(renderArgs), (0, _getBrushesRenderData.rightBottomLine)(renderArgs)];
  } else if ((0, _isNumber3.default)(values.x1) && (0, _isNumber3.default)(values.x2)) {
    return [(0, _getBrushesRenderData.verticalArea)(renderArgs), (0, _getBrushesRenderData.leftVerticalLine)(renderArgs), (0, _getBrushesRenderData.rightVerticalLine)(renderArgs)];
  } else if ((0, _isNumber3.default)(values.y1) && (0, _isNumber3.default)(values.y2)) {
    return [(0, _getBrushesRenderData.horizontalArea)(renderArgs), (0, _getBrushesRenderData.topHorizontalLine)(renderArgs), (0, _getBrushesRenderData.bottomHorizontalLine)(renderArgs)];
  }
  return { showHover: false, type: 'area', path2D: (0, _path2DUtils.getPath2D)() };
};

var brushes = exports.brushes = function brushes(props) {
  if (!props.xScale && !props.yScale) return undefined;
  return (0, _flatten3.default)((0, _map3.default)((0, _flatten3.default)(props.data), function (datum) {
    return brushesRender(props, datum);
  }));
};