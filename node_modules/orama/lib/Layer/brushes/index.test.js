'use strict';

var _mocha = require('mocha');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _defaults = require('../../chartCore/defaults');

var _ = require('./');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017 Kensho Technologies, Inc.

(0, _mocha.it)('Chart/brushes 1', function () {
  var renderData = (0, _.brushes)({
    data: [{ x: 1, y: 1 }],
    xScale: function xScale(d) {
      return d;
    },
    yScale: function yScale(d) {
      return d;
    }
  });
  _assert2.default.deepEqual(renderData[0].type, 'area');
});
(0, _mocha.it)('Chart/brushes 2', function () {
  var renderData = (0, _.brushes)({
    data: [{ x1: 1, x2: 1 }],
    xScale: function xScale(d) {
      return d;
    },
    yScale: function yScale(d) {
      return d;
    },
    plotRect: _defaults.PLOT_RECT
  });
  _assert2.default.deepEqual(renderData[0].type, 'area');
});
(0, _mocha.it)('Chart/brushes 3', function () {
  var renderData = (0, _.brushes)({
    data: [{ y1: 1, y2: 1 }],
    xScale: function xScale(d) {
      return d;
    },
    yScale: function yScale(d) {
      return d;
    },
    plotRect: _defaults.PLOT_RECT
  });
  _assert2.default.deepEqual(renderData[0].type, 'area');
});
(0, _mocha.it)('Chart/brushes 4', function () {
  var renderData = (0, _.brushes)({
    data: [{ x1: 1, x2: 1, y1: 1, y2: 1 }],
    xScale: function xScale(d) {
      return d;
    },
    yScale: function yScale(d) {
      return d;
    },
    plotRect: _defaults.PLOT_RECT
  });
  _assert2.default.deepEqual(renderData[0].type, 'area');
});
(0, _mocha.it)('Chart/brushes missing scales', function () {
  var renderData = (0, _.brushes)({
    data: [{ x1: 1, x2: 1 }],
    plotRect: _defaults.PLOT_RECT
  });
  _assert2.default.deepEqual(renderData, undefined);
});
(0, _mocha.it)('Chart/brushes grouped data', function () {
  var renderData = (0, _.brushes)({
    data: [[{ x1: 1, x2: 1 }]],
    xScale: function xScale(d) {
      return d;
    },
    yScale: function yScale(d) {
      return d;
    },
    plotRect: _defaults.PLOT_RECT
  });
  _assert2.default.deepEqual(renderData[0].type, 'area');
});