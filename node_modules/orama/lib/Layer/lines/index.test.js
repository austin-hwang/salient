'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Copyright 2017 Kensho Technologies, Inc.

var _mocha = require('mocha');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _ = require('./');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var identity = function identity(d) {
  return d;
};
var scale = identity;
scale.invert = identity;

(0, _mocha.it)('Chart/lines 1', function () {
  var renderData = (0, _.lines)({
    data: [{ x: 1, y: 1 }],
    xScale: function xScale(d) {
      return d;
    },
    yScale: function yScale(d) {
      return d;
    }
  });
  _assert2.default.deepEqual(renderData[0], _extends({}, renderData[0], {
    type: 'line',
    stroke: undefined,
    lineWidth: undefined
  }));
});
(0, _mocha.it)('Chart/lines grouped data', function () {
  var renderData = (0, _.lines)({
    data: [[{ x: 1, y: 1 }]],
    xScale: function xScale(d) {
      return d;
    },
    yScale: function yScale(d) {
      return d;
    }
  });
  _assert2.default.deepEqual(renderData[0], _extends({}, renderData[0], {
    type: 'line',
    stroke: undefined,
    lineWidth: undefined
  }));
});

(0, _mocha.it)('Chart/lines.getPointData 1', function () {
  var pointData = (0, _.getPointData)({}, {});
  _assert2.default.deepEqual(pointData, undefined);
});
(0, _mocha.it)('Chart/lines.getPointData 2', function () {
  var props = {
    x: 'x', y: 'y',
    xScale: function xScale(d) {
      return d;
    }, yScale: function yScale(d) {
      return d;
    }
  };
  var datum = { x: 10, y: 10 };
  var pointData = (0, _.getPointData)(props, datum);

  _assert2.default.deepEqual(pointData.type, 'area');
});

(0, _mocha.describe)('Chart/lines.hoverSolver', function () {
  var props = {
    x: 'x', y: 'y',
    xScale: scale,
    yScale: scale
  };
  var hoverData = [{ x: 1, y: 1 }, { x: 2, y: 1 }, { x: 3, y: 1 }];
  (0, _mocha.it)('floor', function () {
    var localMouse = { x: 2.1, y: 1 };
    var result = (0, _.hoverSolver)(props, hoverData, {}, localMouse);
    _assert2.default.deepEqual(result.hoverData, { x: 2, y: 1 });
  });
  (0, _mocha.it)('ceil', function () {
    var localMouse = { x: 1.6, y: 1 };
    var result = (0, _.hoverSolver)(props, hoverData, {}, localMouse);
    _assert2.default.deepEqual(result.hoverData, { x: 2, y: 1 });
  });
  (0, _mocha.it)('undefined', function () {
    var localMouse = { x: undefined, y: 1 };
    var result = (0, _.hoverSolver)(props, hoverData, {}, localMouse);
    _assert2.default.deepEqual(result.hoverData, { x: 3, y: 1 });
  });
  (0, _mocha.it)('0', function () {
    var localMouse = { x: 0, y: 1 };
    var result = (0, _.hoverSolver)(props, hoverData, {}, localMouse);
    _assert2.default.deepEqual(result.hoverData, { x: 1, y: 1 });
  });
});