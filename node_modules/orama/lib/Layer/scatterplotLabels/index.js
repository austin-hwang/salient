'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scatterplotLabels = undefined;

var _cloneDeep2 = require('lodash/cloneDeep');

var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Copyright 2017 Kensho Technologies, Inc.

var _getPlotValues = require('../../Layer/getPlotValues');

var _canvasUtils = require('../../utils/canvasUtils');

var _labeler = require('../../utils/labeler');

var _labeler2 = _interopRequireDefault(_labeler);

var _defaultTheme = require('../../defaultTheme');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var localLabeler = (0, _labeler2.default)();
var ctx = (0, _canvasUtils.getCachedContext)();

var getTextRenderData = function getTextRenderData(props, datum, idx) {
  var plotRect = props.plotRect,
      _props$theme = props.theme,
      theme = _props$theme === undefined ? _defaultTheme.DEFAULT_THEME : _props$theme,
      _props$scatterplotLab = props.scatterplotLabelsBounds,
      scatterplotLabelsBounds = _props$scatterplotLab === undefined ? true : _props$scatterplotLab;

  var values = (0, _getPlotValues.getPlotValues)(props, datum, idx, {
    text: '',
    fill: theme.textFill
  });

  ctx.save();
  ctx.font = theme.plotFontSize + 'px ' + theme.fontFamilyMono;
  var width = ctx.measureText(values.text).width;
  ctx.restore();

  if (scatterplotLabelsBounds) {
    if (values.x + width > plotRect.width + plotRect.x) {
      values.x = values.x - width - 20;
    }
    if (values.y < plotRect.y + 20) values.y += 20;
  }

  return _extends({}, values, {
    id: idx,
    name: values.text,
    width: width + 10,
    selected: true,
    height: 22,
    textAlign: 'left',
    textBaseline: 'middle',
    type: 'text'
  });
};

var scatterplotLabels = exports.scatterplotLabels = function scatterplotLabels(props) {
  if (!props.xScale && !props.yScale) return undefined;

  var labelData = (0, _map3.default)((0, _flatten3.default)(props.data), function (datum, idx) {
    return getTextRenderData(props, datum, idx);
  });

  var anchorData = (0, _map3.default)(labelData, function (d) {
    return {
      x: d.x,
      y: d.y,
      r: 8
    };
  });

  localLabeler.plotRect((0, _cloneDeep3.default)(props.plotRect)).label(labelData).anchor(anchorData).start(100);

  return labelData;
};