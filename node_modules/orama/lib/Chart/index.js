'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Chart = exports.StateChart = exports._Chart = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _defaultTheme = require('../defaultTheme');

var _defaults = require('../chartCore/defaults');

var _chartTransformFlow = require('../chartCore/chartTransformFlow');

var _chartWidthHOC = require('../Chart/chartWidthHOC');

var _getLayers = require('../chartCore/getLayers');

var _getLocalKeys = require('../chartCore/getLocalKeys');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _stateHOC = require('../utils/stateHOC');

var _stateHOC2 = _interopRequireDefault(_stateHOC);

var _memoize = require('../chartCore/memoize');

var memoize = _interopRequireWildcard(_memoize);

var _CanvasInput = require('../CanvasInput');

var _ChartBackground = require('../ChartBackground');

var _ChartRender = require('../Chart/ChartRender');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var handleCanvasInput = function handleCanvasInput(props, childProps) {
  props.onUpdate(childProps);
}; // Copyright 2017 Kensho Technologies, Inc.

var _Chart = exports._Chart = function _Chart(props) {
  var memoizers = props.memoizers;

  var rootProps = (0, _chartTransformFlow.chartTransformFlow)(props, _defaultTheme.getTheme, _getLayers.getLayers, _getLocalKeys.getLocalKeys, memoizers.getDimArrays, memoizers.getTypes, memoizers.getDomains, memoizers.getPlotRect, memoizers.getRanges, memoizers.getTickCounts, memoizers.getScales);
  var renderLayers = memoizers.getRenderLayers(rootProps);
  return _react2.default.createElement(
    'div',
    {
      style: {
        background: props.theme.backgroundFill,
        height: rootProps.height,
        position: 'relative',
        userSelect: 'none',
        width: '100%'
      }
    },
    _react2.default.createElement(_ChartBackground.ChartBackground, rootProps),
    _react2.default.createElement(_ChartRender.ChartRender, {
      renderLayers: renderLayers,
      rootProps: rootProps,
      theme: rootProps.theme
    }),
    _react2.default.createElement(_CanvasInput.CanvasInput, {
      onUpdate: function onUpdate(childProps) {
        return handleCanvasInput(props, childProps);
      },
      renderLayers: renderLayers,
      rootProps: rootProps,
      theme: rootProps.theme
    })
  );
};
_Chart.propTypes = {
  memoizers: _propTypes2.default.object,
  onUpdate: _propTypes2.default.func,
  theme: _propTypes2.default.object
};
_Chart.defaultProps = {
  proportion: _defaults.PROPORTION,
  theme: _defaultTheme.DEFAULT_THEME,
  width: _defaults.WIDTH
};
_Chart.initialState = function () {
  return {
    memoizers: {
      getDimArrays: memoize.getMemoizeDimArrays(),
      getTypes: memoize.getMemoizeTypes(),
      getDomains: memoize.getMemoizeDomains(),
      getPlotRect: memoize.getMemoizePlotRect(),
      getRanges: memoize.getMemoizeRanges(),
      getTickCounts: memoize.getMemoizeTickCounts(),
      getScales: memoize.getMemoizeScales(),
      getRenderLayers: memoize.getMemoizeRenderLayers()
    }
  };
};
var StateChart = exports.StateChart = (0, _stateHOC2.default)(_Chart);
var Chart = exports.Chart = (0, _chartWidthHOC.chartWidthHOC)(StateChart);