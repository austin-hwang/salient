'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Highlight = undefined;

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _indexOf2 = require('lodash/indexOf');

var _indexOf3 = _interopRequireDefault(_indexOf2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _State = require('../../utils/State');

var _State2 = _interopRequireDefault(_State);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } // Copyright 2017 Kensho Technologies, Inc.

var mouseDown = function mouseDown(props, childProps) {
  var data = props.data;
  var renderDatum = childProps.renderDatum;

  if (renderDatum) {
    var index = (0, _indexOf3.default)(data, renderDatum.data);
    if (index > -1) {
      data.splice(index, 1);
      props.onUpdate({
        data: [].concat(_toConsumableArray(data))
      });
    } else {
      props.onUpdate({
        data: [].concat(_toConsumableArray(data), [renderDatum.data])
      });
    }
  }
};

var handleChart = function handleChart(props, childProps) {
  switch (childProps.action) {
    case 'mouseDown':
      mouseDown(props, childProps);
      break;
    // case 'mouseDrag': mouseDrag(props, childProps)
    //   break
    default:
  }
};

var InnerHighlight = function InnerHighlight(props) {
  var child = _react2.default.Children.only(props.children);
  if (child.type.displayName === 'ChartWidthHOC') {
    var HighlightElement = _react2.default.createElement(props.Component, _extends({
      skipExtractArrays: true,
      key: 'InnerHighlight',
      fillValue: 'black',
      alphaValue: 0.5,
      data: props.data
    }, props.componentProps));
    var layers = _react2.default.Children.toArray(child.props.children);
    layers.splice(props.slice, 0, HighlightElement);
    return _react2.default.createElement(
      'div',
      null,
      _react2.default.cloneElement(child, { onUpdate: function onUpdate(childProps) {
          return handleChart(props, childProps);
        } }, layers)
    );
  }
  return _react2.default.createElement('div', null);
};
InnerHighlight.defaultProps = {
  slice: 1,
  data: []
};

var Highlight = exports.Highlight = function Highlight(props) {
  return _react2.default.createElement(
    _State2.default,
    (0, _omit3.default)(props, 'children'),
    _react2.default.createElement(InnerHighlight, {
      children: props.children,
      onUpdate: props.onUpdate
    })
  );
};