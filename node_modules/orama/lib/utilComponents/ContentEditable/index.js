'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright 2017 Kensho Technologies, Inc.

var ContentEditable = function (_React$Component) {
  _inherits(ContentEditable, _React$Component);

  function ContentEditable() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ContentEditable);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ContentEditable.__proto__ || Object.getPrototypeOf(ContentEditable)).call.apply(_ref, [this].concat(args))), _this), _this.componentDidUpdate = function () {
      var node = _this.refs.block;
      if (_this.props.text !== node.innerText) {
        node.innerText = _this.props.text || '';
      }
    }, _this.handleInput = function () {
      var newText = _this.refs.block.innerText.toString().replace(/(\r\n|\n|\r)/gm, '');
      _this.props.onUpdate(_extends({}, _this.props, {
        text: newText
      }));
    }, _this.handleKeyDown = function (evt) {
      if (evt.keyCode === 13) {
        evt.preventDefault();
        _this.refs.block.blur();
        window.getSelection().removeAllRanges();
      }
    }, _this.handleMouseDown = function (evt) {
      evt.stopPropagation();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ContentEditable, [{
    key: 'render',
    value: function render() {
      var props = this.props,
          handleInput = this.handleInput;

      return _react2.default.createElement('div', {
        contentEditable: props.textEditable,
        dangerouslySetInnerHTML: { __html: props.text },
        onBlur: handleInput,
        onInput: handleInput,
        onKeyDown: this.handleKeyDown,
        onMouseDown: this.handleMouseDown,
        ref: 'block',
        style: {
          outline: 'none',
          cursor: 'text'
        }
      });
    }
  }]);

  return ContentEditable;
}(_react2.default.Component);

ContentEditable.propTypes = {
  acceptNewLine: _propTypes2.default.bool,
  onUpdate: _propTypes2.default.func,
  text: _propTypes2.default.string,
  textEditable: _propTypes2.default.bool
};
ContentEditable.defaultProps = {
  acceptNewLine: false,
  onUpdate: function onUpdate() {
    return undefined;
  },
  textEditable: true
};
exports.default = ContentEditable;