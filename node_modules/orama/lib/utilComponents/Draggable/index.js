'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Draggable = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright 2017 Kensho Technologies, Inc.

/*
The <Draggable/> component makes its child 'draggable' by ovveriden its mouseDown, it does not wrap the child in another <div/> or <span/>.
The onUpdate callback is called with `{deltaX, deltaY}` position from the last call.

@example
const handleDraggableUpdate = (props, childProps) => {
  props.onState({
    x: props.x - childProps.deltaX,
    y: props.y - childProps.deltaY,
  })
}
const slider = props => (
  <Block>
    <Draggable
      onUpdate={childProps => handleDraggableUpdate(props, childProps)}
    >
      <Block padding={30}/>
    </Draggable>
  </Block>
)
*/
var Draggable = exports.Draggable = function (_React$Component) {
  _inherits(Draggable, _React$Component);

  function Draggable() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Draggable);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Draggable.__proto__ || Object.getPrototypeOf(Draggable)).call.apply(_ref, [this].concat(args))), _this), _this.updateOnlyTypes = {
      deltaX: _propTypes2.default.number,
      deltaY: _propTypes2.default.number
    }, _this.canUpdate = ['deltaX', 'deltaY'], _this.state = {
      dragging: false
    }, _this.componentDidUpdate = function (props, state) {
      if (_this.state.dragging && !state.dragging) {
        document.addEventListener('mousemove', _this.onMouseMove);
        document.addEventListener('mouseup', _this.onMouseUp);
      } else if (!_this.state.dragging && state.dragging) {
        document.removeEventListener('mousemove', _this.onMouseMove);
        document.removeEventListener('mouseup', _this.onMouseUp);
      }
    }, _this.onMouseDown = function (evt) {
      // only left mouse button
      if (evt.button !== 0) return;
      evt.stopPropagation();
      evt.preventDefault();
      _this.pos = {
        x: evt.clientX,
        y: evt.clientY
      };
      _this.setState({
        dragging: true
      });
    }, _this.onMouseUp = function (evt) {
      evt.stopPropagation();
      evt.preventDefault();
      _this.setState({ dragging: false });
    }, _this.onMouseMove = function (evt) {
      if (!_this.state.dragging) return;
      evt.stopPropagation();
      evt.preventDefault();
      _this.props.onUpdate(_extends({}, _this.props, {
        deltaX: _this.pos.x - evt.clientX,
        deltaY: _this.pos.y - evt.clientY
      }));
      _this.pos = {
        x: evt.clientX,
        y: evt.clientY
      };
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }
  // calculate relative position to the mouse and set dragging=true


  _createClass(Draggable, [{
    key: 'render',
    value: function render() {
      return _react2.default.cloneElement(_react2.default.Children.only(this.props.children), { onMouseDown: this.onMouseDown });
    }
  }]);

  return Draggable;
}(_react2.default.Component);

Draggable.propTypes = {
  children: _propTypes2.default.element,
  onUpdate: _propTypes2.default.func.isRequired
};
Draggable.defaultProps = {
  initialPos: { x: 0, y: 0 }
};