'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TooltipWrapper = exports._TooltipWrapper = exports.getTooltipPosition = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Copyright 2017 Kensho Technologies, Inc.

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _stateHOC = require('../utils/stateHOC');

var _stateHOC2 = _interopRequireDefault(_stateHOC);

var _windowUtils = require('../utils/windowUtils');

var _BlockSize = require('../utilComponents/BlockSize');

var _Tooltip = require('../Tooltip');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TOOLTIP_MARGIN = 15;

var handleBlockSizeUpdate = function handleBlockSizeUpdate(props, childProps) {
  props.onState({
    width: childProps.width,
    height: childProps.height
  });
};
var getTooltipPosition = exports.getTooltipPosition = function getTooltipPosition(props) {
  var mouse = props.mouse,
      width = props.width,
      height = props.height;

  if (!width || !height) {
    return {};
  }
  var _window = (0, _windowUtils.getWindow)();
  var pos = {};
  if (mouse.x + width + TOOLTIP_MARGIN * 2 + 1 > _window.innerWidth) {
    if (width + TOOLTIP_MARGIN * 2 > mouse.x) {
      pos.left = 0;
    } else {
      pos.right = _window.innerWidth - mouse.x;
    }
  } else {
    pos.left = mouse.x;
  }
  if (mouse.y + height + TOOLTIP_MARGIN * 2 + 1 > _window.innerHeight) {
    if (height + TOOLTIP_MARGIN * 2 > mouse.y) {
      pos.top = 0;
    } else {
      pos.bottom = _window.innerHeight - mouse.y;
    }
  } else {
    pos.top = mouse.y;
  }
  return pos;
};

var _TooltipWrapper = exports._TooltipWrapper = function _TooltipWrapper(props) {
  if (!props.mouse || !props.hoverData) return null;
  var _props$layerProps$Too = props.layerProps.Tooltip,
      Tooltip = _props$layerProps$Too === undefined ? _Tooltip.Tooltip : _props$layerProps$Too;

  return _react2.default.createElement(
    _BlockSize.BlockSize,
    {
      onUpdate: function onUpdate(childProps) {
        return handleBlockSizeUpdate(props, childProps);
      },
      style: _extends({
        margin: TOOLTIP_MARGIN,
        pointerEvents: 'none',
        position: 'fixed',
        zIndex: '999999'
      }, getTooltipPosition(props))
    },
    _react2.default.createElement(Tooltip, {
      hoverData: props.hoverData,
      layerProps: props.layerProps,
      theme: props.theme
    })
  );
};
_TooltipWrapper.propTypes = {
  hoverData: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object]),
  layerProps: _propTypes2.default.object,
  mouse: _propTypes2.default.object,
  theme: _propTypes2.default.object
};
var TooltipWrapper = exports.TooltipWrapper = (0, _stateHOC2.default)(_TooltipWrapper);