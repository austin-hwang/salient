'use strict';

var _mocha = require('mocha');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _canvasUtils = require('../../utils/canvasUtils');

var _ = require('./');

var methods = _interopRequireWildcard(_);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017 Kensho Technologies, Inc.

(0, _mocha.it)('getDataUnderMouse.getDataUnderMouse', function () {
  _assert2.default.deepEqual(methods.getDataUnderMouse({}, { x: 100, y: 100 }, _canvasUtils.canvasMock), {
    localMouse: { x: 100, y: 100 }
  });
});
(0, _mocha.it)('getDataUnderMouse.findFirstPass', function () {
  _assert2.default.deepEqual(methods.findFirstPass(_canvasUtils.ctxMock, { x: 0, y: 0 }, [{ type: 'text' }, { type: 'area' }, { type: 'line' }]), undefined);
});
(0, _mocha.it)('getDataUnderMouse.findSecondPass', function () {
  _assert2.default.deepEqual(methods.findSecondPass(_canvasUtils.ctxMock, { x: 0, y: 0 }, [{ type: 'text' }, { type: 'area' }, { type: 'line' }]), undefined);
});
(0, _mocha.it)('getDataUnderMouse.findInRenderLayers', function () {
  _assert2.default.deepEqual(methods.findInRenderLayers({
    ctx: _canvasUtils.ctxMock,
    localMouse: { x: 0, y: 0 },
    renderLayers: [{ type: 'area', layerProps: {} }],
    findFunc: function findFunc() {
      return { type: 'area' };
    }
  }), {
    renderDatum: { type: 'area' },
    hoverRenderData: [{ type: 'area' }],
    hoverData: undefined,
    layerProps: {}
  });
});