'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDataUnderMouse = exports.findInRenderLayers = exports.findSecondPass = exports.findFirstPass = undefined;

var _findLast2 = require('lodash/findLast');

var _findLast3 = _interopRequireDefault(_findLast2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017 Kensho Technologies, Inc.

var findFirstPass = exports.findFirstPass = function findFirstPass(ctx, localMouse, renderData) {
  return (0, _findLast3.default)(renderData, function (d) {
    if (!d) return false;
    if (d.showHover === false) return false;
    ctx.lineJoin = 'round';
    if (d.hover1stPath2D) {
      return ctx.isPointInPath(d.hover1stPath2D, localMouse.x, localMouse.y);
    }
    if (d.type === 'text') return false;
    if (d.type === 'area') {
      return ctx.isPointInPath(d.path2D, localMouse.x, localMouse.y);
    }
    if (d.type === 'line') return ctx.isPointInStroke(d.path2D, localMouse.x, localMouse.y);
    return false;
  });
};
var findSecondPass = exports.findSecondPass = function findSecondPass(ctx, localMouse, renderData) {
  return (0, _findLast3.default)(renderData, function (d) {
    if (!d) return false;
    if (d.showHover === false) return false;
    ctx.lineJoin = 'round';
    if (d.hover2ndPath2D) {
      return ctx.isPointInPath(d.hover2ndPath2D, localMouse.x, localMouse.y);
    }
    if (d.type === 'text') return false;
    return ctx.isPointInStroke(d.path2D, localMouse.x, localMouse.y);
  });
};
var findInRenderLayers = exports.findInRenderLayers = function findInRenderLayers(_ref) {
  var ctx = _ref.ctx,
      localMouse = _ref.localMouse,
      renderLayers = _ref.renderLayers,
      findFunc = _ref.findFunc;

  var renderDatum = void 0;
  var layer = (0, _findLast3.default)(renderLayers, function (_layer) {
    if (_layer.layerProps.showHover === false) return false;
    renderDatum = findFunc(ctx, localMouse, _layer.renderData);
    return renderDatum;
  });
  if (layer) {
    return {
      renderDatum: renderDatum,
      hoverRenderData: [renderDatum],
      hoverData: renderDatum.data,
      layerProps: layer.layerProps
    };
  }
  return undefined;
};
/*
Format return for getDataUnderMouse
*/
var formatReturnData = function formatReturnData(foundData, localMouse) {
  return {
    layerProps: foundData.layerProps,
    renderDatum: foundData.renderDatum,
    hoverRenderData: foundData.hoverRenderData,
    hoverData: foundData.hoverData,
    localMouse: localMouse
  };
};
/*
Find on the render data the geom that intersect whith the mouse position.
*/
var getDataUnderMouse = exports.getDataUnderMouse = function getDataUnderMouse(props, mouse, canvasNode) {
  if (!canvasNode) return {};
  var renderLayers = props.renderLayers;


  var canvasRect = canvasNode.getBoundingClientRect();
  var ctx = canvasNode.getContext('2d');
  var localMouse = {
    x: mouse.x - canvasRect.left,
    y: mouse.y - canvasRect.top
  };

  ctx.lineWidth = 10;
  var inPathData = findInRenderLayers({
    ctx: ctx, localMouse: localMouse, renderLayers: renderLayers, findFunc: findFirstPass
  });

  if (inPathData) return formatReturnData(inPathData, localMouse);

  ctx.lineWidth = 18;
  var inStrokeData = findInRenderLayers({
    ctx: ctx, localMouse: localMouse, renderLayers: renderLayers, findFunc: findSecondPass
  });

  if (inStrokeData) return formatReturnData(inStrokeData, localMouse);
  return {
    localMouse: localMouse
  };
};