'use strict';

var _mocha = require('mocha');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _ = require('./');

var methods = _interopRequireWildcard(_);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _mocha.it)('CanvasInput/methods.runHoverSolverOn 1', function () {
  _assert2.default.deepEqual(methods.runHoverSolverOn({}), {});
}); // Copyright 2017 Kensho Technologies, Inc.

(0, _mocha.it)('CanvasInput/methods.runHoverSolverOn 2', function () {
  var dataUnderMouse = {
    layerProps: {
      hoverSolver: function hoverSolver(d) {
        return d;
      }
    }
  };
  _assert2.default.deepEqual(methods.runHoverSolverOn(dataUnderMouse), dataUnderMouse);
});

(0, _mocha.it)('CanvasInput/methods.getMouseFromEvt 1', function () {
  _assert2.default.deepEqual(methods.getMouseFromEvt({}), {
    x: undefined,
    y: undefined
  });
});
(0, _mocha.it)('CanvasInput/methods.getMouseFromEvt 2', function () {
  _assert2.default.deepEqual(methods.getMouseFromEvt({
    touches: [{}]
  }), {
    x: undefined,
    y: undefined
  });
});