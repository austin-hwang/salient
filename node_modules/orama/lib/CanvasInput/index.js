'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CanvasInput = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _getDataUnderMouse = require('../CanvasInput/getDataUnderMouse');

var _methods = require('../CanvasInput/methods');

var _hoverRender = require('../CanvasRender/hoverRender');

var _TooltipWrapper = require('../TooltipWrapper');

var _CanvasRender = require('../CanvasRender');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright 2017 Kensho Technologies, Inc.

/*
Usually used inside of <ChartRender/>
Get hovered and clicked data on renderData using a <canvas/> element
*/
var CanvasInput = exports.CanvasInput = function (_React$Component) {
  _inherits(CanvasInput, _React$Component);

  function CanvasInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CanvasInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CanvasInput.__proto__ || Object.getPrototypeOf(CanvasInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.componentWillReceiveProps = function (props) {
      if (_this.state.mouse && !_this.mouseLeave) {
        var solvedData = (0, _methods.runHoverSolverOn)((0, _getDataUnderMouse.getDataUnderMouse)(props, _this.state.mouse, _this.canvasNode));
        _this.setState({
          renderDatum: solvedData.renderDatum,
          hoverRenderData: solvedData.hoverRenderData,
          hoverData: solvedData.hoverData,
          localMouse: solvedData.localMouse,
          layerProps: solvedData.layerProps
        });
      }
    }, _this.componentDidUpdate = function (props, state) {
      if (_this.state.mouseDrag && !state.mouseDrag) {
        document.addEventListener('mouseup', _this.handleMouseUp);
      } else if (!_this.state.mouseDrag && state.mouseDrag) {
        document.removeEventListener('mouseup', _this.handleMouseUp);
      }
    }, _this.handleCanvasRef = function (canvasNode) {
      _this.canvasNode = canvasNode;
    }, _this.handleClick = function (evt) {
      evt.stopPropagation();
      evt.preventDefault();
      if (!_this.state.mouseDrag) {
        var mouse = (0, _methods.getMouseFromEvt)(evt);
        var solvedData = (0, _methods.runHoverSolverOn)((0, _getDataUnderMouse.getDataUnderMouse)(_this.props, mouse, _this.canvasNode));
        _this.props.onUpdate({
          action: 'mouseClick',
          mouse: mouse,
          renderDatum: solvedData.renderDatum,
          hoverRenderData: solvedData.hoverRenderData,
          hoverData: solvedData.hoverData,
          localMouse: solvedData.localMouse,
          layerProps: solvedData.layerProps,
          rootProps: _this.props.rootProps
        });
      }
      _this.setState({
        mouseDrag: false
      });
    }, _this.handleDoubleClick = function () {
      _this.props.onUpdate({
        action: 'mouseDoubleClick'
      });
    }, _this.handleMouseDown = function (evt) {
      var mouse = (0, _methods.getMouseFromEvt)(evt);
      var solvedData = (0, _methods.runHoverSolverOn)((0, _getDataUnderMouse.getDataUnderMouse)(_this.props, mouse, _this.canvasNode));
      _this.props.onUpdate({
        action: 'mouseDown',
        mouse: mouse,
        renderDatum: solvedData.renderDatum,
        hoverRenderData: solvedData.hoverRenderData,
        hoverData: solvedData.hoverData,
        localMouse: solvedData.localMouse,
        layerProps: solvedData.layerProps,
        rootProps: _this.props.rootProps
      });
      _this.setState({
        mouseDown: true,
        mouse: mouse,
        hoverRenderData: solvedData.hoverRenderData,
        hoverData: solvedData.hoverData,
        layerProps: solvedData.layerProps
      });
      _this.lastMouse = mouse;
    }, _this.handleMouseMove = function (evt) {
      var mouse = (0, _methods.getMouseFromEvt)(evt);
      var solvedData = (0, _methods.runHoverSolverOn)((0, _getDataUnderMouse.getDataUnderMouse)(_this.props, mouse, _this.canvasNode));
      var mouseDelta = void 0;
      if (_this.lastMouse) {
        mouseDelta = {
          x: _this.lastMouse.x - mouse.x,
          y: _this.lastMouse.y - mouse.y
        };
      }
      _this.props.onUpdate({
        action: _this.state.mouseDrag ? 'mouseDrag' : 'mouseMove',
        mouse: mouse,
        mouseDelta: mouseDelta,
        renderDatum: solvedData.renderDatum,
        hoverRenderData: solvedData.hoverRenderData,
        hoverData: solvedData.hoverData,
        localMouse: solvedData.localMouse,
        layerProps: solvedData.layerProps,
        rootProps: _this.props.rootProps
      });
      _this.setState({
        mouseDrag: _this.state.mouseDown ? true : false,
        mouse: mouse,
        hoverRenderData: solvedData.hoverRenderData,
        hoverData: solvedData.hoverData,
        layerProps: solvedData.layerProps
      });
      _this.lastMouse = mouse;
      _this.mouseLeave = false;
    }, _this.handleMouseUp = function (evt) {
      evt.stopPropagation();
      evt.preventDefault();
      var mouse = (0, _methods.getMouseFromEvt)(evt);
      var solvedData = (0, _methods.runHoverSolverOn)((0, _getDataUnderMouse.getDataUnderMouse)(_this.props, mouse, _this.canvasNode, evt));
      _this.props.onUpdate({
        action: 'mouseUp',
        mouse: mouse,
        renderDatum: solvedData.renderDatum,
        hoverRenderData: solvedData.hoverRenderData,
        hoverData: solvedData.hoverData,
        localMouse: solvedData.localMouse,
        layerProps: solvedData.layerProps,
        rootProps: _this.props.rootProps
      });
      _this.setState({
        mouseDrag: false,
        mouseDown: false
      });
    }, _this.handleMouseLeave = function () {
      _this.props.onUpdate({
        action: 'mouseLeave'
      });
      _this.setState({
        mouse: undefined,
        hoverRenderData: undefined,
        hoverData: undefined,
        layerProps: undefined
      });
      _this.mouseLeave = true;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CanvasInput, [{
    key: 'render',
    value: function render() {
      var props = this.props,
          state = this.state;
      var rootProps = props.rootProps;

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_CanvasRender.CanvasRender // hoverRender
        , { clip: true,
          height: rootProps.height,
          plotRect: rootProps.plotRect,
          render: _hoverRender.hoverRender,
          renderData: state.hoverRenderData,
          theme: props.theme,
          width: rootProps.width
        }),
        _react2.default.createElement('canvas', {
          height: rootProps.height,
          onClick: this.handleClick,
          onDoubleClick: this.handleDoubleClick,
          onMouseDown: this.handleMouseDown,
          onMouseLeave: this.handleMouseLeave,
          onMouseMove: this.handleMouseMove,
          onMouseUp: this.handleMouseUp,
          onTouchEnd: this.handleMouseLeave,
          onTouchMove: this.handleMouseMove,
          onTouchStart: this.handleMouseDown,
          ref: this.handleCanvasRef,
          style: {
            cursor: 'pointer',
            display: 'block',
            position: 'absolute',
            userSelect: 'none',
            width: rootProps.width,
            height: rootProps.height
          },
          width: rootProps.width
        }),
        state.mouse && state.hoverData ? _react2.default.createElement(_TooltipWrapper.TooltipWrapper, {
          hoverData: state.hoverData,
          layerProps: state.layerProps,
          mouse: state.mouse,
          theme: props.theme
        }) : null
      );
    }
  }]);

  return CanvasInput;
}(_react2.default.Component);

CanvasInput.propTypes = {
  onUpdate: _propTypes2.default.func.isRequired,
  renderLayers: _propTypes2.default.array,
  rootProps: _propTypes2.default.object,
  theme: _propTypes2.default.object
};
CanvasInput.defaultProps = {
  renderLayers: []
};