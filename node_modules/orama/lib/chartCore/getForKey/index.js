'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTooltipFormat = exports.getTickFormat = exports.getTickCount = exports.getRange = exports.getDomain = exports.getType = exports.getScale = undefined;

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _isNumber2 = require('lodash/isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

var _max2 = require('lodash/max');

var _max3 = _interopRequireDefault(_max2);

var _min2 = require('lodash/min');

var _min3 = _interopRequireDefault(_min2);

var _uniq2 = require('lodash/uniq');

var _uniq3 = _interopRequireDefault(_uniq2);

var _maxBy2 = require('lodash/maxBy');

var _maxBy3 = _interopRequireDefault(_maxBy2);

var _toPairs2 = require('lodash/toPairs');

var _toPairs3 = _interopRequireDefault(_toPairs2);

var _reduce2 = require('lodash/reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Copyright 2017 Kensho Technologies, Inc.

var _getScale = require('../../chartCore/getScale');

Object.defineProperty(exports, 'getScale', {
  enumerable: true,
  get: function get() {
    return _getScale.getScale;
  }
});
exports.toType = toType;
exports.getTicks = getTicks;

var _rectUtils = require('../../utils/rectUtils');

var rectUtils = _interopRequireWildcard(_rectUtils);

var _defaults = require('../../chartCore/defaults');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function toType(input) {
  return {}.toString.call(input).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
}

var getType = exports.getType = function getType(props, key) {
  if (props[key + 'Type']) return props[key + 'Type'];
  var array = props[key + 'Array'];

  if (!array) return undefined;
  var counter = (0, _reduce3.default)(array, function (acc, d) {
    /* eslint-disable no-param-reassign */
    acc[toType(d)]++;
    /* eslint-enable no-param-reassign */
    return acc;
  }, { number: 0, string: 0, date: 0 });
  var counterPairs = (0, _toPairs3.default)(counter);
  var maxName = (0, _maxBy3.default)(counterPairs, '1')[0];
  return _defaults.JS_TO_VIS_TYPE[maxName];
};
var getDomain = exports.getDomain = function getDomain(props, key) {
  if (props[key + 'Domain']) return props[key + 'Domain'];
  var array = props[key + 'Array'],
      _props$ = props[key + 'Type'],
      type = _props$ === undefined ? _defaults.TYPE : _props$,
      zeroBased = props[key + 'ZeroBased'];

  switch (type) {
    case 'ordinal':
      return (0, _uniq3.default)(array);
    default:
      if (zeroBased) {
        return [(0, _min3.default)([(0, _min3.default)(array), 0]), (0, _max3.default)([(0, _max3.default)(array), 0])];
      }
      return [(0, _min3.default)(array), (0, _max3.default)(array)];
  }
};
var getRange = exports.getRange = function getRange(props, key) {
  if (props[key + 'Range']) return props[key + 'Range'];
  var plotRect = props.plotRect,
      _props$2 = props[key + 'Type'],
      type = _props$2 === undefined ? _defaults.TYPE : _props$2;

  switch (key) {
    case 'y':
      return [rectUtils.getMaxY(plotRect), plotRect.y];
    case 'radius':
      switch (type) {
        case 'ordinal':
          return [2, 4, 8, 12, 16, 20];
        default:
          return [2, 20];
      }
    case 'lineWidth':
      switch (type) {
        case 'ordinal':
          return [1, 2, 3, 4];
        default:
          return [0.5, 4];
      }
    case 'lineDash':
      return [[2], [4], [8], [7, 4, 2, 4]];
    case 'fill':
    case 'stroke':
    case 'hoverStroke':
      switch (type) {
        case 'ordinal':
          return props.theme.plotOrdinalRangeFill;
        default:
          return props.theme.plotLinearRangeFill;
      }
    case 'x':
    default:
      return [plotRect.x, rectUtils.getMaxX(plotRect)];
  }
};
var getTickCount = exports.getTickCount = function getTickCount(props, key) {
  if ((0, _isNumber3.default)(props[key + 'TickCount'])) return props[key + 'TickCount'];
  var range = props[key + 'Range'],
      _tickSpace = props[key + 'TickSpace'];

  switch (key) {
    case 'y':
      var xTickSpace = _tickSpace || _defaults.TICK_Y_SPACE;
      return Math.ceil((range[0] - range[1]) / xTickSpace);
    case 'x':
      var yTickSpace = _tickSpace || _defaults.TICK_X_SPACE;
      return Math.ceil((range[1] - range[0]) / yTickSpace);
    default:
      return 0;
  }
};
var getTickFormat = exports.getTickFormat = function getTickFormat(props, key) {
  if (props[key + 'TickFormat']) return props[key + 'TickFormat'];
  var type = props[key + 'Type'],
      _props$3 = props[key + 'Scale'],
      scale = _props$3 === undefined ? (0, _getScale.getScale)(props, key) : _props$3,
      _props$4 = props[key + 'TickCount'],
      tickCount = _props$4 === undefined ? _defaults.TICK_COUNT : _props$4;

  if (type === 'time') return scale.tickFormat();
  return scale.tickFormat(tickCount);
};
var getTooltipFormat = exports.getTooltipFormat = function getTooltipFormat(props, key) {
  if (props[key + 'TooltipFormat']) return props[key + 'TooltipFormat'];
  var _props$5 = props[key + 'Type'],
      type = _props$5 === undefined ? _defaults.TYPE : _props$5,
      _props$6 = props[key + 'Scale'],
      scale = _props$6 === undefined ? (0, _getScale.getScale)(props, key) : _props$6,
      _props$7 = props[key + 'TickCount'],
      tickCount = _props$7 === undefined ? _defaults.TICK_COUNT : _props$7;

  if (type === 'log') {
    var linearScale = (0, _getScale.getScale)(_extends({}, props, _defineProperty({}, key + 'Type', 'linear')), key);
    return linearScale.tickFormat(tickCount);
  }
  if (type === 'time') {
    return function (d) {
      return d.toDateString();
    };
  }
  if (!scale.tickFormat) return function (d) {
    return d;
  };
  return scale.tickFormat(tickCount);
};
function getTicks(props, key) {
  if (props[key + 'Ticks']) return props[key + 'Ticks'];
  var _props$8 = props[key + 'Type'],
      type = _props$8 === undefined ? _defaults.TYPE : _props$8,
      _props$9 = props[key + 'Domain'],
      domain = _props$9 === undefined ? _defaults.DOMAIN : _props$9,
      _props$10 = props[key + 'TickCount'],
      tickCount = _props$10 === undefined ? _defaults.TICK_COUNT : _props$10,
      _props$11 = props[key + 'Scale'],
      scale = _props$11 === undefined ? (0, _getScale.getScale)(props, key) : _props$11;

  switch (type) {
    case 'ordinal':
      return (0, _map3.default)(domain, function (d) {
        return {
          value: d,
          text: d
        };
      });
    case 'linear':
    default:
      var tickFormat = getTickFormat(_extends({}, props, { scale: scale }), key);
      var ticks = scale.ticks(tickCount);
      return (0, _map3.default)(ticks, function (d) {
        return {
          value: d,
          text: tickFormat(d)
        };
      });
  }
}