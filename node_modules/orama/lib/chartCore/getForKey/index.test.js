'use strict';

var _mocha = require('mocha');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _defaultTheme = require('../../defaultTheme');

var _ = require('./');

var methods = _interopRequireWildcard(_);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017 Kensho Technologies, Inc.

(0, _mocha.it)('visUtils.toType', function () {
  _assert2.default.deepEqual(methods.toType(), 'undefined');
  _assert2.default.deepEqual(methods.toType([]), 'array');
  _assert2.default.deepEqual(methods.toType({}), 'object');
  _assert2.default.deepEqual(methods.toType(10), 'number');
  _assert2.default.deepEqual(methods.toType('10'), 'string');
  _assert2.default.deepEqual(methods.toType(new Date()), 'date');
});
(0, _mocha.it)('Chart/getMethods.getType', function () {
  var props = {
    xArray: [1, 2, 'string', new Date()],
    yArray: ['a', 'b', 1, new Date()],
    fillArray: [new Date(), new Date(), 'a', 1]
  };
  _assert2.default.deepEqual(methods.getType(props, 'x'), 'linear');
  _assert2.default.deepEqual(methods.getType(props, 'y'), 'ordinal');
  _assert2.default.deepEqual(methods.getType(props, 'fill'), 'time');
  _assert2.default.deepEqual(methods.getType(props), undefined);
});
(0, _mocha.it)('Chart/getMethods.getDomain', function () {
  var props = {
    xArray: [1, 2, 3, 4],
    yArray: ['a', 'b', 'c'],
    fillArray: [new Date(2015, 1), new Date(2015, 2), new Date(2015, 3)],
    xType: 'linear',
    yType: 'ordinal',
    fillType: 'time'
  };
  _assert2.default.deepEqual(methods.getDomain(props, 'x'), [1, 4]);
  _assert2.default.deepEqual(methods.getDomain(props, 'y'), ['a', 'b', 'c']);
  _assert2.default.deepEqual(methods.getDomain(props, 'fill'), [new Date(2015, 1), new Date(2015, 3)]);
});
(0, _mocha.it)('Chart/getMethods.getDomain zeroBased', function () {
  var props = {
    xArray: [1, 2, 3, 4],
    xType: 'linear',
    xZeroBased: true
  };
  _assert2.default.deepEqual(methods.getDomain(props, 'x'), [0, 4]);
});
(0, _mocha.it)('Chart/getMethods.getRange', function () {
  var props = {
    plotRect: { x: 0, y: 0, width: 500, height: 500 },
    xType: 'linear',
    yType: 'ordinal',
    fillType: 'time',
    theme: _defaultTheme.DEFAULT_THEME
  };
  _assert2.default.deepEqual(methods.getRange(props, 'x'), [0, 500]);
  _assert2.default.deepEqual(methods.getRange(props, 'y'), [500, 0]);
  _assert2.default.deepEqual(methods.getRange(props, 'fill'), _defaultTheme.DEFAULT_THEME.plotLinearRangeFill);
});
(0, _mocha.it)('Chart/getMethods.getTickCount', function () {
  var props = {
    xRange: [0, 500],
    yRange: [500, 0],
    yTickSpace: 10
  };
  _assert2.default.deepEqual(methods.getTickCount(props, 'x'), 4);
  _assert2.default.deepEqual(methods.getTickCount(props, 'y'), 50);
});