'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMemoizeRenderLayers = exports.getMemoizeRenderLayer = exports.getMemoizeScales = exports.getMemoizeTickCounts = exports.getMemoizeRanges = exports.getMemoizePlotRect = exports.getMemoizeDomains = exports.getMemoizeTypes = exports.getMemoizeDimArrays = exports.getMemoize = undefined;

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Copyright 2017 Kensho Technologies, Inc.

var _getDimArrays = require('../../chartCore/getDimArrays');

var _getForProps = require('../../chartCore/getForProps');

var _getRenderLayers = require('../../chartCore/getRenderLayers');

var _getPlotRect = require('../../chartCore/getPlotRect');

var _rerunChecks = require('../../chartCore/rerunChecks');

var rerunChecks = _interopRequireWildcard(_rerunChecks);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getMemoize = exports.getMemoize = function getMemoize(rerunCheck, transformFunc, isLayer) {
  var savedResult = void 0;
  var prevProps = {};
  var memoizer = function memoizer(props) {
    var rerun = rerunCheck(props, prevProps);
    prevProps = props;
    if (rerun) {
      savedResult = transformFunc(props);
    }
    if (isLayer) {
      return savedResult || transformFunc(props);
    }
    return savedResult || transformFunc(props);
  };
  return memoizer;
};

var getMemoizeDimArrays = exports.getMemoizeDimArrays = function getMemoizeDimArrays() {
  return getMemoize(rerunChecks.rerunCheckGetDimArrays, _getDimArrays.getDimArrays);
};
var getMemoizeTypes = exports.getMemoizeTypes = function getMemoizeTypes() {
  return getMemoize(rerunChecks.rerunCheckGetTypes, _getForProps.getTypes);
};
var getMemoizeDomains = exports.getMemoizeDomains = function getMemoizeDomains() {
  return getMemoize(rerunChecks.rerunCheckGetDomains, _getForProps.getDomains);
};
var getMemoizePlotRect = exports.getMemoizePlotRect = function getMemoizePlotRect() {
  return getMemoize(rerunChecks.rerunCheckGetPlotRect, _getPlotRect.getPlotRect);
};
var getMemoizeRanges = exports.getMemoizeRanges = function getMemoizeRanges() {
  return getMemoize(rerunChecks.rerunCheckGetRanges, _getForProps.getRanges);
};
var getMemoizeTickCounts = exports.getMemoizeTickCounts = function getMemoizeTickCounts() {
  return getMemoize(rerunChecks.rerunCheckGetTickCounts, _getForProps.getTickCounts);
};
var getMemoizeScales = exports.getMemoizeScales = function getMemoizeScales() {
  return getMemoize(rerunChecks.rerunCheckGetScales, _getForProps.getScales);
};
var getMemoizeRenderLayer = exports.getMemoizeRenderLayer = function getMemoizeRenderLayer() {
  return getMemoize(rerunChecks.rerunCheckGetRenderLayers, _getRenderLayers.getLayer, true);
};

var getMemoizeRenderLayers = exports.getMemoizeRenderLayers = function getMemoizeRenderLayers() {
  var layersMemoize = [];
  var memoizeForLayers = function memoizeForLayers(props) {
    var renderLayers = (0, _map3.default)(props.layers, function (layer, i) {
      var layerMemoize = layersMemoize[i];
      if (!layerMemoize) {
        layersMemoize[i] = getMemoizeRenderLayer();
        layerMemoize = layersMemoize[i];
      }
      return layerMemoize(_extends({}, props, layer));
    });
    return renderLayers;
  };
  return memoizeForLayers;
};