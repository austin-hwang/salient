'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDimArrays = exports.wrapUpNewProps = undefined;

var _flow2 = require('lodash/flow');

var _flow3 = _interopRequireDefault(_flow2);

var _keys2 = require('lodash/keys');

var _keys3 = _interopRequireDefault(_keys2);

var _mapKeys2 = require('lodash/mapKeys');

var _mapKeys3 = _interopRequireDefault(_mapKeys2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Copyright 2017 Kensho Technologies, Inc.

var _getDimArraysForRoot = require('../../chartCore/getDimArraysForRoot');

var _mergeDimArrays = require('../../chartCore/mergeDimArrays');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Dimension arrays are lists with the values extracted from the data for a certain dimension, eg. xArray: [1, 2, 3, 4, 5]
According to the accessors (`{x, y, fill}`) defined on the props.layers the dimArrays are created and assigned to a new props object.
Dimension arrays are also grouped according to accessorsGroups
*/

/*
Add 'Array' sufix to dimArrays, add groupedKeys props
*/
var wrapUpNewProps = exports.wrapUpNewProps = function wrapUpNewProps(dimArrays) {
  return _extends({}, (0, _mapKeys3.default)(dimArrays, function (value, key) {
    return key + 'Array';
  }), {
    groupedKeys: (0, _keys3.default)(dimArrays)
  });
};
/*
Main exported function, used outside of the module on the Chart props transform flow.
*/
var getDimArrays = exports.getDimArrays = function getDimArrays(props) {
  if (props.groupedKeys) return {};
  var getArraysFlow = (0, _flow3.default)(_getDimArraysForRoot.getDimArraysForRoot, function (dimArrays) {
    return (0, _mergeDimArrays.mergeDimArrays)(dimArrays, props.accessorsGroups);
  }, wrapUpNewProps);
  return getArraysFlow(props);
};