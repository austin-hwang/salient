'use strict';

var _mocha = require('mocha');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _ = require('./');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _mocha.it)('Chart/getDimArraysForRoot.extractDimArray 1', function () {
  var data = [{ x: 1 }, { x: 2 }];
  var actual = (0, _.extractDimArray)(data, 'x');
  var expected = [1, 2];
  _assert2.default.deepEqual(actual, expected);
}); // Copyright 2017 Kensho Technologies, Inc.

(0, _mocha.it)('Chart/getDimArraysForRoot.extractDimArray 2', function () {
  var data = [{ x: null }, { x: NaN }, { x: undefined }, { x: 0 }];
  var actual = (0, _.extractDimArray)(data, 'x');
  var expected = [0];
  _assert2.default.deepEqual(actual, expected);
});

(0, _mocha.it)('Chart/getDimArraysForRoot.getDimArraysForLayer 2', function () {
  var data = [{ x: 1, y: 'a' }, { x: 2, y: 'b' }];
  var layer = {
    data: data,
    localAccessors: { x: 'x', y: 'y' }
  };
  var actual = (0, _.getDimArraysForLayer)(layer);
  var expected = {
    x: [1, 2],
    y: ['a', 'b']
  };
  _assert2.default.deepEqual(actual, expected);
});

(0, _mocha.it)('Chart/getDimArraysForRoot.getDimArraysForRoot 1', function () {
  var layer = {
    data: [{ x: 1, y: 'a' }, { x: 2, y: 'b' }],
    localAccessors: { x: 'x', y: 'y' }
  };
  var props = {
    layers: [layer]
  };
  var actual = (0, _.getDimArraysForRoot)(props);
  var expected = {
    x: [1, 2],
    y: ['a', 'b']
  };
  _assert2.default.deepEqual(actual, expected);
});
(0, _mocha.it)('Chart/getDimArraysForRoot.getDimArraysForRoot 2', function () {
  var layer1 = {
    data: [{ x: 1 }, { x: 2 }],
    localAccessors: { x: 'x', y: 'y' }
  };
  var layer2 = {
    data: [{ y: 'a' }, { y: 'b' }],
    localAccessors: { x: 'x', y: 'y' }
  };
  var props = {
    layers: [layer1, layer2]
  };
  var actual = (0, _.getDimArraysForRoot)(props);
  var expected = {
    x: [1, 2],
    y: ['a', 'b']
  };
  _assert2.default.deepEqual(actual, expected);
});
(0, _mocha.it)('Chart/getDimArraysForRoot.getDimArraysForRoot 3', function () {
  var layer1 = {
    data: [{ x: 1 }, { x: 2 }],
    localAccessors: { x: 'x' }
  };
  var layer2 = {
    data: [{ x: 3 }, { x: 4 }],
    localAccessors: { x: 'x' }
  };
  var props = {
    layers: [layer1, layer2]
  };
  var actual = (0, _.getDimArraysForRoot)(props);
  var expected = {
    x: [1, 2, 3, 4]
  };
  _assert2.default.deepEqual(actual, expected);
});