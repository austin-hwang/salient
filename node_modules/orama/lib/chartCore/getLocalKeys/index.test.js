'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Copyright 2017 Kensho Technologies, Inc.

var _mocha = require('mocha');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _ = require('./');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _mocha.it)('Chart/getLocalKeys.layerMapper 1', function () {
  var actual = (0, _.layerMapper)({});
  var expected = {
    localAccessors: {},
    localKeys: []
  };
  _assert2.default.deepEqual(actual, expected);
});
(0, _mocha.it)('Chart/getLocalKeys.layerMapper 2', function () {
  var layer = {
    x: 'x', x1: 'x1', y: 'y'
  };
  var actual = (0, _.layerMapper)(layer);
  var expected = _extends({}, layer, {
    localAccessors: { x: 'x', x1: 'x1', y: 'y' },
    localKeys: ['x', 'x1', 'y']
  });
  _assert2.default.deepEqual(actual, expected);
});

(0, _mocha.it)('Chart/getLocalKeys.getLocalKeys 1', function () {
  var layer = {
    x: 'x', x1: 'x1', y: 'y'
  };
  var props = { layers: [layer] };
  var result = (0, _.getLocalKeys)(props);
  var actual = result.layers[0];
  var expected = _extends({}, layer, {
    localAccessors: { x: 'x', x1: 'x1', y: 'y' },
    localKeys: ['x', 'x1', 'y']
  });
  _assert2.default.ok(result.layers);
  _assert2.default.deepEqual(actual, expected);
});