'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeDimArrays = exports.omitGroups = undefined;

var _reduce2 = require('lodash/reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _values2 = require('lodash/values');

var _values3 = _interopRequireDefault(_values2);

var _flow2 = require('lodash/flow');

var _flow3 = _interopRequireDefault(_flow2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Copyright 2017 Kensho Technologies, Inc.

var _defaults = require('../../chartCore/defaults');

var _compactData = require('../../chartCore/compactData');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var omitGroups = exports.omitGroups = function omitGroups(dimArrays, accessorsGroups) {
  return (0, _flow3.default)(_values3.default, _flatten3.default, function (accessorsValues) {
    return (0, _omit3.default)(dimArrays, accessorsValues);
  })(accessorsGroups);
};
/*
Merge keys according to their groups, eg. 'x', 'x0', 'x1' get merged into one xArray
*/
var mergeDimArrays = exports.mergeDimArrays = function mergeDimArrays(dimArrays) {
  var accessorsGroups = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _defaults.ACCESSORS_GROUPS;
  return (0, _reduce3.default)(accessorsGroups, function (acc, group, key) {
    var mergedDimArray = (0, _reduce3.default)(group, function (acc2, d) {
      return (0, _compactData.compactData)(acc2.concat(dimArrays[d]));
    }, []);
    if (mergedDimArray.length === 0) return acc;
    return _extends({}, acc, _defineProperty({}, key, mergedDimArray));
  }, omitGroups(dimArrays, accessorsGroups));
};