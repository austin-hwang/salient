'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.basicRender = undefined;

var _each2 = require('lodash/each');

var _each3 = _interopRequireDefault(_each2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _clearAndClip = require('../clearAndClip');

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017 Kensho Technologies, Inc.

var extractRenderDataFromLayers = function extractRenderDataFromLayers(renderLayers) {
  return (0, _flatten3.default)((0, _map3.default)(renderLayers, 'renderData'));
};

var getRenderObjects = function getRenderObjects(props) {
  var renderData = props.renderData,
      renderLayers = props.renderLayers;

  if (renderData) return renderData;
  if (renderLayers) return extractRenderDataFromLayers(renderLayers);
  return [];
};

var stroke = function stroke(theme, ctx, d) {
  ctx.globalAlpha = d.strokeAlpha || d.alpha || theme.plotAlpha;
  ctx.lineWidth = d.lineWidth || theme.plotLineWidth;
  ctx.strokeStyle = d.stroke || theme.plotFill;
  if (d.lineDash) {
    ctx.setLineDash(d.lineDash);
  }
  ctx.stroke(d.path2D);
};

var basicRender = exports.basicRender = function basicRender(props, ctx) {
  var theme = props.theme;

  ctx.save();
  ctx.lineJoin = 'round';
  (0, _clearAndClip.clearAndClip)(props, ctx);
  (0, _each3.default)(getRenderObjects(props), function (d) {
    if (!d) return;
    if (d.type === 'line') {
      stroke(theme, ctx, d);
    } else if (d.type === 'area') {
      ctx.globalAlpha = d.fillAlpha || d.alpha || theme.plotAlpha;
      ctx.fillStyle = d.fill || theme.plotFill;
      ctx.fill(d.path2D);
      if (d.stroke) stroke(theme, ctx, d);
    } else if (d.type === 'text') {
      if ((0, _utils.notDatum)(d.text)) return;
      ctx.save();
      ctx.globalAlpha = d.alpha;
      ctx.font = d.font || (d.fontSize || theme.plotFontSize) + 'px ' + theme.fontFamilyMono;
      ctx.fillStyle = d.fill || theme.textFill;
      ctx.textAlign = d.textAlign || 'left';
      ctx.textBaseline = d.textBaseline || 'alphabetic';
      ctx.translate(d.x, d.y);
      ctx.rotate(d.rotate);
      ctx.fillText(d.text, 0, 0);
      ctx.restore();
    }
  });
  ctx.restore();
};