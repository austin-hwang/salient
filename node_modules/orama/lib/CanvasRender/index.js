'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CanvasRender = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _defaultTheme = require('../defaultTheme');

var _defaults = require('../chartCore/defaults');

var _basicRender = require('./basicRender');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright 2017 Kensho Technologies, Inc.

/**
 * Component create a Canvas and use the renderData for drawing geometries on it.
 * The renderData follows a specific format.
 */
var CanvasRender = exports.CanvasRender = function (_React$Component) {
  _inherits(CanvasRender, _React$Component);

  function CanvasRender() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CanvasRender);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CanvasRender.__proto__ || Object.getPrototypeOf(CanvasRender)).call.apply(_ref, [this].concat(args))), _this), _this.handleCanvasRef = function (canvasNode) {
      _this.canvasNode = canvasNode;
    }, _this.componentDidMount = function () {
      _this.handleUpdate(_this.props);
    }, _this.shouldComponentUpdate = function (nextProps) {
      if (_this.props.width !== nextProps.width || _this.props.height !== nextProps.height) return true;
      return false;
    }, _this.componentDidUpdate = function () {
      _this.handleUpdate(_this.props);
    }, _this.componentWillReceiveProps = function (nextProps) {
      if (_this.props.renderData !== nextProps.renderData) {
        _this.handleUpdate(nextProps);
      }
      if (_this.props.renderLayers !== nextProps.renderLayers) {
        _this.handleUpdate(nextProps);
      }
    }, _this.handleUpdate = function (props) {
      var ctx = _this.canvasNode.getContext('2d');
      ctx.save();
      ctx.scale(2, 2);
      _this.props.render(props, ctx);
      ctx.restore();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CanvasRender, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement('canvas', {
        height: this.props.height * 2,
        ref: this.handleCanvasRef,
        style: {
          display: 'block',
          position: 'absolute',
          width: this.props.width,
          height: this.props.height
        },
        width: this.props.width * 2
      });
    }
  }]);

  return CanvasRender;
}(_react2.default.Component);

CanvasRender.propTypes = {
  clip: _propTypes2.default.bool,
  height: _propTypes2.default.number.isRequired,
  plotRect: _propTypes2.default.object,
  render: _propTypes2.default.func.isRequired,
  renderData: _propTypes2.default.array,
  renderLayers: _propTypes2.default.array,
  width: _propTypes2.default.number.isRequired
};
CanvasRender.defaultProps = {
  render: _basicRender.basicRender,
  width: _defaults.WIDTH,
  height: _defaults.HEIGHT,
  theme: _defaultTheme.DEFAULT_THEME
};