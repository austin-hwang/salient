'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChartBackground = exports.getBackgroundRenderData = exports.getYText = exports.getXText = exports.getYGuides = exports.getXGuides = exports.getBackground = undefined;

var _findLast2 = require('lodash/findLast');

var _findLast3 = _interopRequireDefault(_findLast2);

var _compact2 = require('lodash/compact');

var _compact3 = _interopRequireDefault(_compact2);

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _filter2 = require('lodash/filter');

var _filter3 = _interopRequireDefault(_filter2);

var _sum2 = require('lodash/sum');

var _sum3 = _interopRequireDefault(_sum2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _includes2 = require('lodash/includes');

var _includes3 = _interopRequireDefault(_includes2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Copyright 2017 Kensho Technologies, Inc.

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _defaultTheme = require('../defaultTheme');

var _defaults = require('../chartCore/defaults');

var _path2DUtils = require('../utils/path2DUtils');

var _getForKey = require('../chartCore/getForKey');

var _rectUtils = require('../utils/rectUtils');

var _CanvasRender = require('../CanvasRender');

var _BottomLabel = require('./BottomLabel');

var _LeftLabel = require('./LeftLabel');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getBackground = exports.getBackground = function getBackground(props) {
  if (props.backgroundShow === false) return undefined;
  var _props$backgroundOffs = props.backgroundOffset,
      backgroundOffset = _props$backgroundOffs === undefined ? _defaults.BACKGROUND_OFFSET : _props$backgroundOffs,
      plotRect = props.plotRect,
      theme = props.theme;

  var backgroundRect = (0, _rectUtils.inset)(-backgroundOffset, plotRect);
  var backgroundPath = (0, _path2DUtils.getPath2D)();
  backgroundPath.rect(backgroundRect.x, backgroundRect.y, backgroundRect.width, backgroundRect.height);
  return {
    fill: theme.plotBackgroundFill,
    path2D: backgroundPath,
    stroke: 'transparent',
    type: 'area'
  };
};
var getXGuides = exports.getXGuides = function getXGuides(props, thick) {
  if (!(0, _includes3.default)(props.groupedKeys, 'x')) return undefined;
  if (props.xShowGuides === false) return undefined;
  var _props$backgroundOffs2 = props.backgroundOffset,
      backgroundOffset = _props$backgroundOffs2 === undefined ? _defaults.BACKGROUND_OFFSET : _props$backgroundOffs2,
      plotRect = props.plotRect,
      theme = props.theme,
      xScale = props.xScale,
      xTicks = props.xTicks;

  return (0, _map3.default)(xTicks, function (d) {
    var linePath = (0, _path2DUtils.getPath2D)();
    var x = xScale(d.value);
    linePath.moveTo(x, plotRect.y - backgroundOffset);
    linePath.lineTo(x, plotRect.y + plotRect.height + backgroundOffset);
    return {
      path2D: linePath,
      type: 'line',
      lineWidth: thick ? theme.guideZeroLineWidth : theme.guideLineWidth,
      stroke: thick ? theme.guideZeroStroke : theme.guideStroke
    };
  });
};
var getYGuides = exports.getYGuides = function getYGuides(props, thick) {
  if (!(0, _includes3.default)(props.groupedKeys, 'y')) return undefined;
  if (props.yShowGuides === false) return undefined;
  var _props$backgroundOffs3 = props.backgroundOffset,
      backgroundOffset = _props$backgroundOffs3 === undefined ? _defaults.BACKGROUND_OFFSET : _props$backgroundOffs3,
      plotRect = props.plotRect,
      theme = props.theme,
      yScale = props.yScale,
      yTicks = props.yTicks;

  return (0, _map3.default)(yTicks, function (d) {
    var linePath = (0, _path2DUtils.getPath2D)();
    var y = yScale(d.value);
    linePath.moveTo(plotRect.x - backgroundOffset, y);
    linePath.lineTo(plotRect.x + plotRect.width + backgroundOffset, y);
    return {
      path2D: linePath,
      type: 'line',
      lineWidth: thick ? theme.guideZeroLineWidth : theme.guideLineWidth,
      stroke: thick ? theme.guideZeroStroke : theme.guideStroke
    };
  });
};
var getXText = exports.getXText = function getXText(props) {
  if (!(0, _includes3.default)(props.groupedKeys, 'x')) return undefined;
  if (props.xShowTicks === false) return undefined;
  var theme = props.theme;

  var defaultOffset = theme.axisTickFontSize * (theme.lineHeight - 1);
  var _props$backgroundOffs4 = props.backgroundOffset,
      backgroundOffset = _props$backgroundOffs4 === undefined ? _defaults.BACKGROUND_OFFSET : _props$backgroundOffs4,
      plotRect = props.plotRect,
      xScale = props.xScale,
      _props$xTickOffset = props.xTickOffset,
      xTickOffset = _props$xTickOffset === undefined ? defaultOffset : _props$xTickOffset,
      xTicks = props.xTicks;

  return (0, _map3.default)(xTicks, function (d) {
    return {
      type: 'text',
      text: d.text,
      x: xScale(d.value),
      y: (0, _sum3.default)([backgroundOffset, plotRect.y, plotRect.height, xTickOffset]),
      textBaseline: 'top',
      textAlign: 'center',
      font: theme.axisTickFontSize + 'px ' + theme.fontFamilyMono
    };
  });
};
var getYText = exports.getYText = function getYText(props) {
  if (!(0, _includes3.default)(props.groupedKeys, 'y')) return undefined;
  if (props.yShowTicks === false) return undefined;
  var theme = props.theme;

  var defaultOffset = theme.axisTickFontSize * (theme.lineHeight - 1);
  var _props$backgroundOffs5 = props.backgroundOffset,
      backgroundOffset = _props$backgroundOffs5 === undefined ? _defaults.BACKGROUND_OFFSET : _props$backgroundOffs5,
      plotRect = props.plotRect,
      yScale = props.yScale,
      _props$yTickOffset = props.yTickOffset,
      yTickOffset = _props$yTickOffset === undefined ? defaultOffset : _props$yTickOffset,
      yTicks = props.yTicks;

  return (0, _map3.default)(yTicks, function (d) {
    return {
      type: 'text',
      text: d.text,
      x: (0, _sum3.default)([plotRect.x, -backgroundOffset, -yTickOffset]),
      y: yScale(d.value),
      textAlign: 'right',
      textBaseline: 'middle',
      fill: theme.textFill,
      font: theme.axisTickFontSize + 'px ' + theme.fontFamilyMono
    };
  });
};
var getBackgroundRenderData = exports.getBackgroundRenderData = function getBackgroundRenderData(props) {
  var background = getBackground(props);
  var xTicks = props.xTicks || (0, _getForKey.getTicks)(props, 'x');
  var yTicks = props.yTicks || (0, _getForKey.getTicks)(props, 'y');
  var xGuides = getXGuides(_extends({}, props, { xTicks: xTicks }));
  var yGuides = getYGuides(_extends({}, props, { yTicks: yTicks }));
  var xText = getXText(_extends({}, props, { xTicks: xTicks }));
  var yText = getYText(_extends({}, props, { yTicks: yTicks }));
  var thickXGuide = getXGuides(_extends({}, props, {
    xTicks: (0, _filter3.default)(xTicks, function (d) {
      return d.value === 0;
    })
  }), true);
  var thickYGuide = getYGuides(_extends({}, props, {
    yTicks: (0, _filter3.default)(yTicks, function (d) {
      return d.value === 0;
    })
  }), true);
  return (0, _flatten3.default)((0, _compact3.default)([background, xGuides, yGuides, thickXGuide, thickYGuide, xText, yText]));
};

var getLabelText = function getLabelText(props, key) {
  var text = props[key + 'Name'] || props[key];
  if (text) return text;
  var layer = (0, _findLast3.default)(props.layers, function (d) {
    return d[key + 'Name'] || d[key];
  });
  if (layer) return layer[key + 'Name'] || layer[key];
  return undefined;
};

/*
Used inside </>
*/
var ChartBackground = exports.ChartBackground = function ChartBackground(props) {
  return _react2.default.createElement(
    'div',
    null,
    _react2.default.createElement(_CanvasRender.CanvasRender, {
      height: props.height,
      plotRect: props.plotRect,
      renderData: getBackgroundRenderData(props),
      theme: props.theme,
      width: props.width
    }),
    props.yShowLabel ? _react2.default.createElement(_LeftLabel.LeftLabel, {
      plotRect: props.plotRect,
      text: getLabelText(props, 'y'),
      theme: props.theme
    }) : null,
    props.xShowLabel ? _react2.default.createElement(_BottomLabel.BottomLabel, {
      plotRect: props.plotRect,
      text: getLabelText(props, 'x'),
      theme: props.theme
    }) : null
  );
};
ChartBackground.propTypes = {
  height: _propTypes2.default.number,
  onUpdate: _propTypes2.default.func,
  plotRect: _propTypes2.default.object,
  theme: _propTypes2.default.object,
  width: _propTypes2.default.number,
  x: _propTypes2.default.string,
  xName: _propTypes2.default.string,
  xShowLabel: _propTypes2.default.bool,
  y: _propTypes2.default.string,
  yName: _propTypes2.default.string,
  yShowLabel: _propTypes2.default.bool
};
ChartBackground.defaultProps = {
  theme: _defaultTheme.DEFAULT_THEME,
  xShowLabel: true,
  yShowLabel: true
};