'use strict';

var _mocha = require('mocha');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _ = require('./');

var methods = _interopRequireWildcard(_);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _mocha.it)('dataHelpers.flow', function () {
  _assert2.default.deepEqual(methods.flow(10, function (d) {
    return d - 5;
  }, function (d) {
    return d * 100;
  }), 500);
}); // Copyright 2017 Kensho Technologies, Inc.

(0, _mocha.it)('dataHelpers.flow, no argument', function () {
  _assert2.default.deepEqual(methods.flow(), undefined);
});
(0, _mocha.it)('dataHelpers.flow, one argument', function () {
  _assert2.default.deepEqual(methods.flow(10), 10);
});

(0, _mocha.it)('dataHelpers.runTransArg', function () {
  _assert2.default.deepEqual(methods.runTransArg({ d: 'a + 1', c: 'c * 2' }, { a: 1, b: 2, c: 3 }), { d: 2, c: 6 });
});
(0, _mocha.it)('dataHelpers.transMapFunc', function () {
  _assert2.default.deepEqual(methods.transMapFunc({ d: 'a + 1', c: 'c * 2' })({ a: 1, b: 2, c: 3 }), { a: 1, b: 2, d: 2, c: 6 });
});
(0, _mocha.it)('dataHelpers.trans', function () {
  _assert2.default.deepEqual(methods.trans({ d: 'a + 1', c: 'c * 2' })([{ a: 1, b: 2, c: 3 }]), [{ a: 1, b: 2, d: 2, c: 6 }]);
});